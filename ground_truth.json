[
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "a118a0bf-85ed-45bf-9770-c3b18264c0ce",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 31,
                                "content": "      verifySuccessfulPoisonNullByteExploit(file)"
                            },
                            {
                                "line": 32,
                                "content": ""
                            },
                            {
                                "line": 33,
                                "content": "      res.sendFile(path.resolve('ftp/', file))"
                            },
                            {
                                "line": 34,
                                "content": "    } else {"
                            },
                            {
                                "line": 35,
                                "content": "      res.status(403)"
                            }
                        ],
                        "id": "66daa70f-941a-4ea1-9ea9-e74feda116c7",
                        "vulnerableStartLine": 33,
                        "vulnerableEndLine": 33,
                        "startLine": 31,
                        "endLine": 35,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "a118a0bf-85ed-45bf-9770-c3b18264c0ce",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-07-31T11:27:12.000Z",
                "updateAt": "2025-07-31T11:27:12.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "HIGH",
                "currentPriority": "urgent",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/fileServer.ts",
                "vulnerableStartLine": 33,
                "vulnerableEndLine": 33,
                "vulnerability": {
                    "cwe": [
                        "CWE-73"
                    ],
                    "owaspTop10": [
                        "A04:2021 - Insecure Design"
                    ],
                    "cweArray": [
                        "CWE-73"
                    ],
                    "references": [
                        {
                            "id": "11ca9b08-bb11-4de7-85f5-83be571b99f7",
                            "name": "OWASP Input Validation Cheat Sheet",
                            "url": "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "express-res-sendfile.ts",
                            "content": "import path = require('path')\nimport { Request, Response, NextFunction } from 'express'\n\n\nmodule.exports = function badNormal () {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const file = req.params.file\n    // ruleid: express-res-sendfile\n    res.sendFile(path.resolve('ftp/', file))\n    // ruleid: express-res-sendfile\n    res.sendFile(path.join('/ftp/', file))\n    // ruleid: express-res-sendfile\n    res.sendFile(file)\n  }\n\n\n}\nmodule.exports = function goodNormal () {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const file = 'foo'\n    // ok: express-res-sendfile\n    res.sendFile(path.resolve('ftp/', file))\n    // ok: express-res-sendfile\n    res.sendfile(req.app.get('staticFilePath') + '/index-test.html');\n    // diffrent rule \n    // ok: express-res-sendfile\n    res.sendfile(req.params.foo, {root: '/'});\n    // ok: express-res-sendfile\n    res.sendfile(req.params.foo, options);\n  }\n\n}\n\n\nmodule.exports = function badWithTypes () {\n  return ({ params, query }: Request, res: Response, next: NextFunction) => {\n    const file = params.file\n    // ruleid: express-res-sendfile\n    res.sendFile(path.resolve('ftp/', file))\n    // ruleid: express-res-sendfile\n    res.sendFile(path.join('/ftp/', file))\n    // ruleid: express-res-sendfile\n    res.sendFile(file)\n    // diffrent rule \n    // ok: express-res-sendfile\n    res.sendfile(file, {root: '/'});\n  }\n\n}\n\nmodule.exports = function goodWithTypes () {\n  return ({ params, query, session }: Request, res: Response, next: NextFunction) => {\n    const file = session\n    // ok: express-res-sendfile\n    res.sendFile(path.resolve('ftp/', file))\n  }\n\n}\n\n\nmodule.exports = function advanced () {\n  return ({ params, query }: Request, res: Response, next: NextFunction) => {\n    const file = params.file\n\n    if (!file.includes('/')) {\n      joinModeOrDeepSemgrep(file, res, next)\n    } \n  }\n\n  function joinModeOrDeepSemgrep (file: string, res: Response, next: NextFunction) {\n\n      // ruleid: express-res-sendfile\n      res.sendFile(path.resolve('ftp/', file))\n\n  }\n\n}\n"
                        }
                    ],
                    "id": "2cd0de93-4b5e-43b3-a83b-2bb62d2221a8",
                    "name": "Express res.sendFile Path Traversal",
                    "shortDescription": "Unvalidated user input passed to res.sendFile allows arbitrary file reading via path traversal.",
                    "description": "The application invokes **res.sendFile** with user-controlled data. In functions like `res.sendFile(path.resolve('ftp/', file))` or `res.sendFile(path.join('/ftp/', file))`, attackers can supply `file` values containing `../` segments to traverse directories. This **path traversal** flaw permits reading arbitrary files on the host filesystem. The root cause is lack of input validation and insufficient path canonicalization. Successful exploitation compromises confidentiality by exposing sensitive files, configuration data, or credentials.",
                    "howToPrevent": "1. **Canonicalize and validate input**: use `path.resolve` on the user input, then verify that the resolved path starts with an allowed base directory.\r\n2. **Whitelist filenames**: maintain an explicit list of allowed file names or patterns.\r\n3. **Use the `root` option**: call `res.sendFile(file, { root: STATIC_BASE_PATH })` instead of concatenating paths manually.\r\n4. **Reject malicious patterns**: reject input containing `..`, absolute paths, or URL-encoded traversal sequences.",
                    "severity": "HIGH",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
                        "baseScore": "7.5"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "express"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "MEDIUM",
                        "likelihood": "HIGH"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast",
        "dataflow": [
            {
                "step": 1,
                "file": "/server.ts",
                "line": 272,
                "function": "Express route handler",
                "variables": "req.params.file",
                "operation": "SOURCE - Input utilisateur depuis URL parameter /ftp/:file",
                "taint_status": "TAINTED"
            },
            {
                "step": 2,
                "file": "/routes/fileServer.ts",
                "line": 16,
                "function": "servePublicFiles",
                "variables": "params.file",
                "operation": "PROPAGATION - Extraction du paramètre file depuis request params",
                "taint_status": "TAINTED"
            },
            {
                "step": 3,
                "file": "/routes/fileServer.ts",
                "line": 18,
                "function": "servePublicFiles",
                "variables": "file.includes('/')",
                "operation": "VALIDATION - Vérification partielle: bloque '/' mais pas '..'",
                "taint_status": "TAINTED"
            },
            {
                "step": 4,
                "file": "/routes/fileServer.ts",
                "line": 19,
                "function": "verify",
                "variables": "file",
                "operation": "PROPAGATION - Passage à la fonction verify pour validation",
                "taint_status": "TAINTED"
            },
            {
                "step": 5,
                "file": "/routes/fileServer.ts",
                "line": 27,
                "function": "verify",
                "variables": "endsWithAllowlistedFileType(file)",
                "operation": "VALIDATION - Vérification extension .md/.pdf ou incident-support.kdbx",
                "taint_status": "TAINTED"
            },
            {
                "step": 6,
                "file": "/routes/fileServer.ts",
                "line": 28,
                "function": "verify",
                "variables": "security.cutOffPoisonNullByte(file)",
                "operation": "SANITIZATION - Suppression poison null bytes (%00)",
                "taint_status": "TAINTED"
            },
            {
                "step": 7,
                "file": "/routes/fileServer.ts",
                "line": 33,
                "function": "verify",
                "variables": "path.resolve('ftp/', file)",
                "operation": "SINK - Path traversal via res.sendFile avec input utilisateur non sécurisé",
                "taint_status": "TAINTED"
            }
        ],
        "vulnerability_truth": {
            "verdict": "TP",
            "explanation": "VRAI POSITIF - Path Traversal exploitable. Bien que des validations soient en place, elles sont insuffisantes pour empêcher l'exploitation. La vérification !file.includes('/') bloque seulement les forward slashes directs mais n'empêche pas l'utilisation de '../' pour remonter les répertoires. Un attaquant peut exploiter avec des payloads comme '../../../etc/passwd.md' (avec extension requise) ou '../../../etc/passwd%00.md' (pour contourner la validation d'extension). Le cutOffPoisonNullByte() aide partiellement mais ne résout pas le problème fondamental de path traversal. Accessible via GET /ftp/[payload] où [payload] peut être '../../../etc/passwd.md'."
        }
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "d042708e-80c6-4641-8ac7-4dfef5cb592f",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 60,
                                "content": "          throw new Error('Username is null')"
                            },
                            {
                                "line": 61,
                                "content": "        }"
                            },
                            {
                                "line": 62,
                                "content": "        username = eval(code) // eslint-disable-line no-eval"
                            },
                            {
                                "line": 63,
                                "content": "      } catch (err) {"
                            },
                            {
                                "line": 64,
                                "content": "        username = '\\\\' + username"
                            }
                        ],
                        "id": "9a13d452-c2b3-4436-82c5-4f5784eac29d",
                        "vulnerableStartLine": 62,
                        "vulnerableEndLine": 62,
                        "startLine": 60,
                        "endLine": 64,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "d042708e-80c6-4641-8ac7-4dfef5cb592f",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-07-31T11:27:12.000Z",
                "updateAt": "2025-07-31T11:27:12.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "HIGH",
                "currentPriority": "urgent",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/userProfile.ts",
                "vulnerableStartLine": 62,
                "vulnerableEndLine": 62,
                "vulnerability": {
                    "cwe": [
                        "CWE-79"
                    ],
                    "owaspTop10": [
                        "A07:2017 - Cross-Site Scripting (XSS)",
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-79"
                    ],
                    "references": [
                        {
                            "id": "4db40b5c-f3cd-4f6d-917a-ecd72d1b0a6a",
                            "name": "OWASP XSS Prevention Cheat Sheet",
                            "url": "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
                        },
                        {
                            "id": "f69f278f-cd5d-4c4c-a4b4-246824dd699b",
                            "name": "OWASP Top 10 2021: Injection",
                            "url": "https://owasp.org/Top10/A03_2021-Injection"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "eval-detected.html",
                            "content": "<!-- ruleid: eval-detected -->\n<script>\n    const rootDiv = document.getElementById('root');\n    import { sanitize } from \"dompurify\"\n    const hash = location.hash.slice(1)\n    \n    \n    eval(hash1)\n    \n    const obj2 = { foo: 'baz', y: hash1 };\n    \n    const clonedObj = { ...obj2 };\n    \n    eval(clonedObj.y);\n    \n    // ok: eval-detected\n    eval(\"safe\");\n    \n    \n    \n    </script>"
                        }
                    ],
                    "id": "8cf422b0-3cb8-4bd7-951b-f2793496fa9d",
                    "name": "Uncontrolled Eval Execution",
                    "shortDescription": "Use of eval() on untrusted input allows execution of arbitrary scripts, leading to XSS and code injection.",
                    "description": "**Use of `eval()`**: Executes a string as JavaScript code. When input is attacker-controlled, this enables execution of injected scripts.\r\n\r\n**Root Cause**: Unsanitized invocation of `eval()` on `hash1` and `clonedObj.y`, which are derived from `location.hash` (user-supplied). This bypasses input validation and permits code injection.\r\n\r\n**Mechanism**: An attacker crafts a URL with a malicious hash fragment. When the page runs `eval(hash1)`, the injected code executes in the page context.\r\n\r\n**Risks**:\r\n- **Cross-Site Scripting (XSS)**: Execution of unauthorized scripts in the victim’s browser.\r\n- **Data Theft**: Access to cookies, local storage, or DOM data.\r\n- **Session Hijacking**: Capture of session tokens.\r\n- **Application Manipulation**: Alteration of application logic or state.",
                    "howToPrevent": "**1. Eliminate `eval()`**: Replace with safer alternatives. For JSON data, use `JSON.parse()`. Avoid dynamic code execution.\r\n\r\n**2. Sanitize Inputs**: Validate and clean all user-derived data. Use libraries like `DOMPurify` to remove malicious content.\r\n\r\n**3. Safe DOM APIs**: Insert content with `textContent` or `innerText` instead of `innerHTML`.\r\n\r\n**4. Content Security Policy (CSP)**: Deploy a policy that disallows `unsafe-eval` and restricts script sources.\r\n\r\n**5. Secure Code Patterns**: Use strict coding practices, such as whitelisting valid values and employing linter rules to detect `eval()` usage.",
                    "severity": "HIGH",
                    "language": "HTML",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:L",
                        "baseScore": "8.3"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "audit"
                        ],
                        "technology": [
                            "browser"
                        ],
                        "languages": [
                            "HTML"
                        ],
                        "category": "security",
                        "confidence": "LOW",
                        "impact": "MEDIUM",
                        "likelihood": "LOW"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "e12b6bd9-7cfd-4dd1-a5a6-3d954ac3304a",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 12,
                                "content": ""
                            },
                            {
                                "line": 13,
                                "content": "    if (!file.includes('/')) {"
                            },
                            {
                                "line": 14,
                                "content": "      res.sendFile(path.resolve('encryptionkeys/', file))"
                            },
                            {
                                "line": 15,
                                "content": "    } else {"
                            },
                            {
                                "line": 16,
                                "content": "      res.status(403)"
                            }
                        ],
                        "id": "c3bf3f43-e844-461e-b3bf-62c76a3617e4",
                        "vulnerableStartLine": 14,
                        "vulnerableEndLine": 14,
                        "startLine": 12,
                        "endLine": 16,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "e12b6bd9-7cfd-4dd1-a5a6-3d954ac3304a",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-07-31T11:27:12.000Z",
                "updateAt": "2025-07-31T11:27:12.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "HIGH",
                "currentPriority": "urgent",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/keyServer.ts",
                "vulnerableStartLine": 14,
                "vulnerableEndLine": 14,
                "vulnerability": {
                    "cwe": [
                        "CWE-73"
                    ],
                    "owaspTop10": [
                        "A04:2021 - Insecure Design"
                    ],
                    "cweArray": [
                        "CWE-73"
                    ],
                    "references": [
                        {
                            "id": "11ca9b08-bb11-4de7-85f5-83be571b99f7",
                            "name": "OWASP Input Validation Cheat Sheet",
                            "url": "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "express-res-sendfile.ts",
                            "content": "import path = require('path')\nimport { Request, Response, NextFunction } from 'express'\n\n\nmodule.exports = function badNormal () {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const file = req.params.file\n    // ruleid: express-res-sendfile\n    res.sendFile(path.resolve('ftp/', file))\n    // ruleid: express-res-sendfile\n    res.sendFile(path.join('/ftp/', file))\n    // ruleid: express-res-sendfile\n    res.sendFile(file)\n  }\n\n\n}\nmodule.exports = function goodNormal () {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const file = 'foo'\n    // ok: express-res-sendfile\n    res.sendFile(path.resolve('ftp/', file))\n    // ok: express-res-sendfile\n    res.sendfile(req.app.get('staticFilePath') + '/index-test.html');\n    // diffrent rule \n    // ok: express-res-sendfile\n    res.sendfile(req.params.foo, {root: '/'});\n    // ok: express-res-sendfile\n    res.sendfile(req.params.foo, options);\n  }\n\n}\n\n\nmodule.exports = function badWithTypes () {\n  return ({ params, query }: Request, res: Response, next: NextFunction) => {\n    const file = params.file\n    // ruleid: express-res-sendfile\n    res.sendFile(path.resolve('ftp/', file))\n    // ruleid: express-res-sendfile\n    res.sendFile(path.join('/ftp/', file))\n    // ruleid: express-res-sendfile\n    res.sendFile(file)\n    // diffrent rule \n    // ok: express-res-sendfile\n    res.sendfile(file, {root: '/'});\n  }\n\n}\n\nmodule.exports = function goodWithTypes () {\n  return ({ params, query, session }: Request, res: Response, next: NextFunction) => {\n    const file = session\n    // ok: express-res-sendfile\n    res.sendFile(path.resolve('ftp/', file))\n  }\n\n}\n\n\nmodule.exports = function advanced () {\n  return ({ params, query }: Request, res: Response, next: NextFunction) => {\n    const file = params.file\n\n    if (!file.includes('/')) {\n      joinModeOrDeepSemgrep(file, res, next)\n    } \n  }\n\n  function joinModeOrDeepSemgrep (file: string, res: Response, next: NextFunction) {\n\n      // ruleid: express-res-sendfile\n      res.sendFile(path.resolve('ftp/', file))\n\n  }\n\n}\n"
                        }
                    ],
                    "id": "2cd0de93-4b5e-43b3-a83b-2bb62d2221a8",
                    "name": "Express res.sendFile Path Traversal",
                    "shortDescription": "Unvalidated user input passed to res.sendFile allows arbitrary file reading via path traversal.",
                    "description": "The application invokes **res.sendFile** with user-controlled data. In functions like `res.sendFile(path.resolve('ftp/', file))` or `res.sendFile(path.join('/ftp/', file))`, attackers can supply `file` values containing `../` segments to traverse directories. This **path traversal** flaw permits reading arbitrary files on the host filesystem. The root cause is lack of input validation and insufficient path canonicalization. Successful exploitation compromises confidentiality by exposing sensitive files, configuration data, or credentials.",
                    "howToPrevent": "1. **Canonicalize and validate input**: use `path.resolve` on the user input, then verify that the resolved path starts with an allowed base directory.\r\n2. **Whitelist filenames**: maintain an explicit list of allowed file names or patterns.\r\n3. **Use the `root` option**: call `res.sendFile(file, { root: STATIC_BASE_PATH })` instead of concatenating paths manually.\r\n4. **Reject malicious patterns**: reject input containing `..`, absolute paths, or URL-encoded traversal sequences.",
                    "severity": "HIGH",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
                        "baseScore": "7.5"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "express"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "MEDIUM",
                        "likelihood": "HIGH"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "e9188d21-3b42-49ca-96ff-126971ea4a52",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 195,
                                "content": "      res.status(200).json({"
                            },
                            {
                                "line": 196,
                                "content": "        status: bot.training.state,"
                            },
                            {
                                "line": 197,
                                "content": "        body: bot.training.state ? bot.greet(`${user.id}`) : `${config.get<string>('application.chatBot.name')} isn't ready at the moment, please wait while I set things up`"
                            },
                            {
                                "line": 198,
                                "content": "      })"
                            },
                            {
                                "line": 199,
                                "content": "    } catch (err) {"
                            }
                        ],
                        "id": "0fdcc86c-9cfb-4920-9519-fd69397eaded",
                        "vulnerableStartLine": 197,
                        "vulnerableEndLine": 197,
                        "startLine": 195,
                        "endLine": 199,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "e9188d21-3b42-49ca-96ff-126971ea4a52",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-07-31T11:27:12.000Z",
                "updateAt": "2025-07-31T11:27:12.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "HIGH",
                "currentPriority": "urgent",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/chatbot.ts",
                "vulnerableStartLine": 197,
                "vulnerableEndLine": 197,
                "vulnerability": {
                    "cwe": [
                        "CWE-79"
                    ],
                    "owaspTop10": [
                        "A07:2017 - Cross-Site Scripting (XSS)",
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-79"
                    ],
                    "references": [],
                    "codeExamples": [
                        {
                            "filename": "raw-html-concat.py",
                            "content": "import os\nimport flask\nimport hashlib\n\napp = flask.Flask(__name__)\n\n@app.route(\"/route_param/<route_param>\")\ndef route_param(route_param):\n    print(\"blah\")\n    # ruleid:raw-html-format\n    return \"<a href='%s'>Click me!</a>\" % route_param\n\n@app.route(\"/route_param_ok/<route_param>\")\ndef route_param_ok(route_param):\n    print(\"blah\")\n    # ok: raw-html-format\n    return \"<a href='https://example.com'>Click me!</a>\"\n\n@app.route(\"/route_param_format/<route_param>\")\ndef route_param_format(route_param):\n    print(\"blah\")\n    # ruleid:raw-html-format\n    return \"<a href='{}'>Click me!</a>\".format(route_param)\n\n@app.route(\"/route_param_percent_format/<route_param>\")\ndef route_param_percent_format(route_param):\n    print(\"blah\")\n    # ruleid:raw-html-format\n    return \"<a href='%s'>Click me!</a>\" % route_param\n\n@app.route(\"/get_param_inline\", methods=[\"GET\"])\ndef get_param_inline():\n    # ruleid:raw-html-format\n    return \"<a href='%s'>Click me!</a>\" % flask.request.args.get(\"param\")\n\n@app.route(\"/get_param_inline_concat\", methods=[\"GET\"])\ndef get_param_inline_concat():\n    # ruleid:raw-html-format\n    return \"<a href='\" + flask.request.args.get(\"param\") + \"'>Click me!</a>\"\n\n@app.route(\"/get_param_concat\", methods=[\"GET\"])\ndef get_param_concat():\n    param = flask.request.args.get(\"param\")\n    # ruleid:raw-html-format\n    return \"<a href='\" + param + \"'>Click me!</a>\"\n\n@app.route(\"/get_param_format\", methods=[\"GET\"])\ndef get_param_format():\n    param = flask.request.args.get(\"param\")\n    # ruleid:raw-html-format\n    return \"<a href='{}'>Click me!</a>\".format(param)\n\n@app.route(\"/get_param_percent_format\", methods=[\"GET\"])\ndef get_param_percent_format():\n    param = flask.request.args.get(\"param\")\n    # ruleid:raw-html-format\n    return \"<a href='%s'>Click me!</a>\" % (param,)\n\n@app.route(\"/post_param_branch\", methods=[\"POST\"])\ndef post_param_branch():\n    param = flask.request.form['param']\n    if True:\n        # ruleid:raw-html-format\n        return \"<a href='%s'>Click me!</a>\" % param\n\n# Real world example\n@app.route('/models/<model>')\ndef load_model(model):\n    # ruleid:raw-html-format\n    htmlpage = '''\n    <body style='margin : 0px; overflow: hidden;'>\n        <scene-tag embedded arjs>\n            <marker-tag id=\"memarker\" type=\"pattern\" url=\"../static/patterns/pattern-kanji_qr.patt\" vidhandler>\n                <entity model=\"obj: url(../static/models/{}.obj); mtl: url(../static/models/{}.mtl)\"> </entity>\n            </marker-tag>\n        </scene-tag>\n    </body>\n    '''.format(model,model)\n    return htmlpage\n\n@app.route(\"/ok\")\ndef ok():\n    # ok: raw-html-format\n    return \"<a href='https://example.com'>Click me!</a>\"\n\n@app.route(\"/post_param_branch\", methods=[\"POST\"])\ndef post_param_branch():\n    param = flask.request.form['param']\n    part = flask.render_template(\"link.html\", data=param)\n    if True:\n        # ok:raw-html-format\n        return \"<a href='%s'>Click me!</a>\" % part\n"
                        }
                    ],
                    "id": "3502f12c-31bf-4496-ab4f-8b3d286935b0",
                    "name": "Reflected XSS in Manually Constructed HTML",
                    "shortDescription": "Unescaped user input is inserted into manually constructed HTML in Flask routes, enabling reflected cross-site scripting.",
                    "description": "**Manual HTML Construction**: The application concatenates or formats **unescaped user input** into HTML strings (for example, `\"<a href='%s'>...\" % route_param` or `\"<a href='{}'>...\".format(param)`).\r\n\r\n**Vulnerability Mechanism**: Absence of **output encoding** or **template auto-escaping** allows an attacker to inject `<script>` tags, event handlers, or other HTML elements, resulting in execution of arbitrary JavaScript in the user’s browser context.\r\n\r\n**Impact**: An attacker can exploit this flaw to perform **session hijacking**, **credential theft**, or **unauthorized actions** under the user’s identity by crafting a malicious URL that delivers and executes payloads when clicked.",
                    "howToPrevent": "- Use Jinja2 templates via `flask.render_template()`, which **auto-escapes** all variables by default.\r\n- Apply explicit **output encoding** on dynamic values using `markupsafe.escape()` before injecting them into HTML.\r\n- Validate and sanitize inputs with a **strict whitelist** of allowed characters or URL schemes (for example, using `urllib.parse` to parse and verify URLs).\r\n- Avoid manual string concatenation or formatting of HTML; rely on template engines or dedicated sanitization libraries for any user-supplied content.",
                    "severity": "HIGH",
                    "language": "Python",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:L/A:L",
                        "baseScore": "7.6"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "flask"
                        ],
                        "languages": [
                            "Python"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "MEDIUM",
                        "likelihood": "MEDIUM"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "f9cdf013-c559-4df4-8b7c-91f9e6ebe7e6",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 12,
                                "content": ""
                            },
                            {
                                "line": 13,
                                "content": "    if (!file.includes('/')) {"
                            },
                            {
                                "line": 14,
                                "content": "      res.sendFile(path.resolve('ftp/quarantine/', file))"
                            },
                            {
                                "line": 15,
                                "content": "    } else {"
                            },
                            {
                                "line": 16,
                                "content": "      res.status(403)"
                            }
                        ],
                        "id": "772124dc-523e-499e-b18d-9edd5721e59e",
                        "vulnerableStartLine": 14,
                        "vulnerableEndLine": 14,
                        "startLine": 12,
                        "endLine": 16,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "f9cdf013-c559-4df4-8b7c-91f9e6ebe7e6",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-07-31T11:27:12.000Z",
                "updateAt": "2025-07-31T11:27:12.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "HIGH",
                "currentPriority": "urgent",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/quarantineServer.ts",
                "vulnerableStartLine": 14,
                "vulnerableEndLine": 14,
                "vulnerability": {
                    "cwe": [
                        "CWE-73"
                    ],
                    "owaspTop10": [
                        "A04:2021 - Insecure Design"
                    ],
                    "cweArray": [
                        "CWE-73"
                    ],
                    "references": [
                        {
                            "id": "11ca9b08-bb11-4de7-85f5-83be571b99f7",
                            "name": "OWASP Input Validation Cheat Sheet",
                            "url": "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "express-res-sendfile.ts",
                            "content": "import path = require('path')\nimport { Request, Response, NextFunction } from 'express'\n\n\nmodule.exports = function badNormal () {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const file = req.params.file\n    // ruleid: express-res-sendfile\n    res.sendFile(path.resolve('ftp/', file))\n    // ruleid: express-res-sendfile\n    res.sendFile(path.join('/ftp/', file))\n    // ruleid: express-res-sendfile\n    res.sendFile(file)\n  }\n\n\n}\nmodule.exports = function goodNormal () {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const file = 'foo'\n    // ok: express-res-sendfile\n    res.sendFile(path.resolve('ftp/', file))\n    // ok: express-res-sendfile\n    res.sendfile(req.app.get('staticFilePath') + '/index-test.html');\n    // diffrent rule \n    // ok: express-res-sendfile\n    res.sendfile(req.params.foo, {root: '/'});\n    // ok: express-res-sendfile\n    res.sendfile(req.params.foo, options);\n  }\n\n}\n\n\nmodule.exports = function badWithTypes () {\n  return ({ params, query }: Request, res: Response, next: NextFunction) => {\n    const file = params.file\n    // ruleid: express-res-sendfile\n    res.sendFile(path.resolve('ftp/', file))\n    // ruleid: express-res-sendfile\n    res.sendFile(path.join('/ftp/', file))\n    // ruleid: express-res-sendfile\n    res.sendFile(file)\n    // diffrent rule \n    // ok: express-res-sendfile\n    res.sendfile(file, {root: '/'});\n  }\n\n}\n\nmodule.exports = function goodWithTypes () {\n  return ({ params, query, session }: Request, res: Response, next: NextFunction) => {\n    const file = session\n    // ok: express-res-sendfile\n    res.sendFile(path.resolve('ftp/', file))\n  }\n\n}\n\n\nmodule.exports = function advanced () {\n  return ({ params, query }: Request, res: Response, next: NextFunction) => {\n    const file = params.file\n\n    if (!file.includes('/')) {\n      joinModeOrDeepSemgrep(file, res, next)\n    } \n  }\n\n  function joinModeOrDeepSemgrep (file: string, res: Response, next: NextFunction) {\n\n      // ruleid: express-res-sendfile\n      res.sendFile(path.resolve('ftp/', file))\n\n  }\n\n}\n"
                        }
                    ],
                    "id": "2cd0de93-4b5e-43b3-a83b-2bb62d2221a8",
                    "name": "Express res.sendFile Path Traversal",
                    "shortDescription": "Unvalidated user input passed to res.sendFile allows arbitrary file reading via path traversal.",
                    "description": "The application invokes **res.sendFile** with user-controlled data. In functions like `res.sendFile(path.resolve('ftp/', file))` or `res.sendFile(path.join('/ftp/', file))`, attackers can supply `file` values containing `../` segments to traverse directories. This **path traversal** flaw permits reading arbitrary files on the host filesystem. The root cause is lack of input validation and insufficient path canonicalization. Successful exploitation compromises confidentiality by exposing sensitive files, configuration data, or credentials.",
                    "howToPrevent": "1. **Canonicalize and validate input**: use `path.resolve` on the user input, then verify that the resolved path starts with an allowed base directory.\r\n2. **Whitelist filenames**: maintain an explicit list of allowed file names or patterns.\r\n3. **Use the `root` option**: call `res.sendFile(file, { root: STATIC_BASE_PATH })` instead of concatenating paths manually.\r\n4. **Reject malicious patterns**: reject input containing `..`, absolute paths, or URL-encoded traversal sequences.",
                    "severity": "HIGH",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
                        "baseScore": "7.5"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "express"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "MEDIUM",
                        "likelihood": "HIGH"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "1d0ac9d1-9572-4da9-b77d-93ddd04e2c7f",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 69,
                                "content": "      const fn = pug.compile(template)"
                            },
                            {
                                "line": 70,
                                "content": "      let compiledTemplate = fn()"
                            },
                            {
                                "line": 71,
                                "content": "      compiledTemplate = compiledTemplate.replace('<script id=\"subtitle\"></script>', '<script id=\"subtitle\" type=\"text/vtt\" data-label=\"English\" data-lang=\"en\">' + subs + '</script>')"
                            },
                            {
                                "line": 72,
                                "content": "      res.send(compiledTemplate)"
                            },
                            {
                                "line": 73,
                                "content": "    })"
                            }
                        ],
                        "id": "25f6eb4a-7761-4e5b-ab40-a45fdbb5f1b0",
                        "vulnerableStartLine": 71,
                        "vulnerableEndLine": 71,
                        "startLine": 69,
                        "endLine": 73,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "1d0ac9d1-9572-4da9-b77d-93ddd04e2c7f",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-07-31T11:27:12.000Z",
                "updateAt": "2025-07-31T11:27:12.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "MEDIUM",
                "currentPriority": "normal",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/videoHandler.ts",
                "vulnerableStartLine": 71,
                "vulnerableEndLine": 71,
                "vulnerability": {
                    "cwe": [
                        "CWE-79"
                    ],
                    "owaspTop10": [
                        "A07:2017 - Cross-Site Scripting (XSS)",
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-79"
                    ],
                    "references": [
                        {
                            "id": "c01a8077-70cb-4164-96a8-085a8b7437a2",
                            "name": "Juice Shop videoHandler.ts Injection",
                            "url": "https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68"
                        },
                        {
                            "id": "da78e1a7-3adf-4683-b033-7943d002e91d",
                            "name": "XSS in a Script Tag",
                            "url": "https://www.developsec.com/2017/11/09/xss-in-a-script-tag/"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "unknown-value-with-script-tag.js",
                            "content": "/*\n * Copyright (c) 2014-2020 Bjoern Kimminich.\n * SPDX-License-Identifier: MIT\n */\n\nconst fs = require('fs')\nconst pug = require('pug')\nconst config = require('config')\nconst challenges = require('../data/datacache').challenges\nconst utils = require('../lib/utils')\nconst themes = require('../views/themes/themes').themes\n\nexports.getVideo = () => {\n  return (req, res) => {\n    const path = videoPath()\n    const stat = fs.statSync(path)\n    const fileSize = stat.size\n    const range = req.headers.range\n    if (range) {\n      const parts = range.replace(/bytes=/, '').split('-')\n      const start = parseInt(parts[0], 10)\n      const end = parts[1] ? parseInt(parts[1], 10) : fileSize - 1\n      const chunksize = (end - start) + 1\n      const file = fs.createReadStream(path, { start, end })\n      const head = {\n        'Content-Range': `bytes ${start}-${end}/${fileSize}`,\n        'Accept-Ranges': 'bytes',\n        'Content-Length': chunksize,\n        'Content-Location': '/assets/public/videos/JuiceShopJingle.mp4',\n        'Content-Type': 'video/mp4'\n      }\n      res.writeHead(206, head)\n      file.pipe(res)\n    } else {\n      const head = {\n        'Content-Length': fileSize,\n        'Content-Type': 'video/mp4'\n      }\n      res.writeHead(200, head)\n      fs.createReadStream(path).pipe(res)\n    }\n  }\n}\n\nexports.promotionVideo = () => {\n  return (req, res) => {\n    fs.readFile('views/promotionVideo.pug', function (err, buf) {\n      if (err) throw err\n      let template = buf.toString()\n      const subs = getSubsFromFile()\n\n      // ok:unknown-value-with-script-tag\n      var w = \"<script>\";\n\n      // ruleid:unknown-value-with-script-tag\n      utils.solveIf(challenges.videoXssChallenge, () => { return utils.contains(subs, '</script><script>alert(`xss`)</script>') })\n\n      const theme = themes[config.get('application.theme')]\n      template = template.replace(/_title_/g, config.get('application.name'))\n      template = template.replace(/_favicon_/g, favicon())\n      template = template.replace(/_bgColor_/g, theme.bgColor)\n      template = template.replace(/_textColor_/g, theme.textColor)\n      template = template.replace(/_navColor_/g, theme.navColor)\n      template = template.replace(/_primLight_/g, theme.primLight)\n      template = template.replace(/_primDark_/g, theme.primDark)\n      const fn = pug.compile(template)\n      let compiledTemplate = fn()\n      // ruleid:unknown-value-with-script-tag\n      compiledTemplate = compiledTemplate.replace('<script id=\"subtitle\"></script>', '<script id=\"subtitle\" type=\"text/vtt\" data-label=\"English\" data-lang=\"en\">' + subs + '</script>')\n      res.send(compiledTemplate)\n    })\n  }\n  function favicon () {\n    return utils.extractFilename(config.get('application.favicon'))\n  }\n}\n\nfunction getSubsFromFile () {\n  let subtitles = 'JuiceShopJingle.vtt'\n  if (config && config.application && config.application.promotion && config.application.promotion.subtitles !== null) {\n    subtitles = utils.extractFilename(config.application.promotion.subtitles)\n  }\n  const data = fs.readFileSync('frontend/dist/frontend/assets/public/videos/' + subtitles, 'utf8')\n  return data.toString()\n}\n\nfunction videoPath () {\n  if (config && config.application && config.application.promotion && config.application.promotion.video !== null) {\n    const video = utils.extractFilename(config.application.promotion.video)\n    return 'frontend/src/assets/public/videos/' + video\n  }\n  return 'frontend/src/assets/public/videos/JuiceShopJingle.mp4'\n}\n\n// cf. https://github.com/ianmin2/lightframer//blob/182348e6e9f2066991df80d02b1233ff7db0d4a1/assets/assets/js/jquery.js#L9232\njQuery.ajaxTransport( \"script\", function( s ) {\n    // This transport only deals with cross domain requests\n    if ( s.crossDomain ) {\n        var script, callback;\n        return {\n            send: function( _, complete ) {\n                // ok:unknown-value-with-script-tag\n                script = jQuery(\"<script>\").prop({\n                    async: true,\n                    charset: s.scriptCharset,\n                    src: s.url\n                }).on(\n                    \"load error\",\n                    callback = function( evt ) {\n                        script.remove();\n                        callback = null;\n                        if ( evt ) {\n                            complete( evt.type === \"error\" ? 404 : 200, evt.type );\n                        }\n                    }\n                );\n                document.head.appendChild( script[ 0 ] );\n            },\n            abort: function() {\n                if ( callback ) {\n                    callback();\n                }\n            }\n        };\n    }\n});\n"
                        }
                    ],
                    "id": "d41a8e5b-4aa9-4891-8596-6c738467c5b8",
                    "name": "Unsanitized Script Tag Injection",
                    "shortDescription": "Unsanitized data is injected into a <script> tag, enabling cross-site scripting attacks.",
                    "description": "A cross-site scripting vulnerability arises when an unknown value is inserted directly into a `<script>` tag without validation or encoding. The lack of input sanitization or context-aware escaping **(root cause)** allows attacker-controlled payloads to execute in users’ browsers. An attacker can craft a value for the `subs` variable that closes the existing script context and injects arbitrary JavaScript, leading to session hijacking, data theft, or site defacement.",
                    "howToPrevent": "1. **Use Context-Aware Encoding**: Escape data before inserting into JavaScript contexts (e.g., use `JSON.stringify` or templating engines with auto-escaping).\r\n2. **Validate and Sanitize Input**: Apply a whitelist of allowed characters or patterns to any external input used in templates.\r\n3. **Escape Special Characters**: Replace `<`, `>`, `&`, `\"`, and `'` in dynamic values.\r\n4. **Leverage Secure Templating**: Use template functions that automatically encode variables based on context.\r\n5. **Content Security Policy**: Implement a strict CSP to restrict inline scripts and external sources.",
                    "severity": "MEDIUM",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
                        "baseScore": "5.4"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "audit"
                        ],
                        "technology": [
                            "javascript"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "LOW",
                        "impact": "LOW",
                        "likelihood": "LOW"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "69c8fc87-cacd-49bf-a63e-125c2017b95e",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 76,
                                "content": "    if (new RegExp(`vuln-code-snippet vuln-line.*${challengeKey}`).exec(lines[i]) != null) {"
                            },
                            {
                                "line": 77,
                                "content": "      vulnLines.push(i + 1)"
                            },
                            {
                                "line": 78,
                                "content": "    } else if (new RegExp(`vuln-code-snippet neutral-line.*${challengeKey}`).exec(lines[i]) != null) {"
                            },
                            {
                                "line": 79,
                                "content": "      neutralLines.push(i + 1)"
                            },
                            {
                                "line": 80,
                                "content": "    }"
                            }
                        ],
                        "id": "446f0bd9-2faa-4df9-9b41-93bdfd015851",
                        "vulnerableStartLine": 78,
                        "vulnerableEndLine": 78,
                        "startLine": 76,
                        "endLine": 80,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "69c8fc87-cacd-49bf-a63e-125c2017b95e",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-07-31T11:27:11.000Z",
                "updateAt": "2025-07-31T11:27:11.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "MEDIUM",
                "currentPriority": "normal",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/lib/codingChallenges.ts",
                "vulnerableStartLine": 78,
                "vulnerableEndLine": 78,
                "vulnerability": {
                    "cwe": [
                        "CWE-1333"
                    ],
                    "owaspTop10": [
                        "A05:2021 - Security Misconfiguration",
                        "A06:2017 - Security Misconfiguration"
                    ],
                    "cweArray": [
                        "CWE-1333"
                    ],
                    "references": [
                        {
                            "id": "0512582f-2c8c-468d-a865-996f4a514406",
                            "name": "detect-non-literal-regexp rule in ESLint Plugin Security",
                            "url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js"
                        },
                        {
                            "id": "22f05b6f-0c74-49f2-84e7-65b4a8305524",
                            "name": "Regular Expression Denial of Service - OWASP",
                            "url": "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "detect-non-literal-regexp.js",
                            "content": "function ok (name) {\n  //ok: detect-non-literal-regexp\n  const reg = new RegExp(\"\\\\w+\")\n  return reg.exec(name)\n}\n\nfunction bad (name) {\n  //ruleid: detect-non-literal-regexp\n  const reg = new RegExp(\"\\\\w+\" + name)\n  return reg.exec(name)\n}\n\nfunction jsliteral (name) {\n  const exp = /a.*/;\n  //ok: detect-non-literal-regexp\n  const reg = new RegExp(exp);\n  return reg.exec(name);\n}\n"
                        }
                    ],
                    "id": "80942215-d260-44c1-b09f-7bbf7055f7aa",
                    "name": "Dynamic RegExp Creation Leading to ReDoS",
                    "shortDescription": "Dynamic regex creation from untrusted input can lead to Regular Expression Denial-of-Service that blocks the main thread.",
                    "description": "**Dynamic pattern construction** using the **RegExp** constructor with user-controlled data can introduce patterns susceptible to **catastrophic backtracking**. When triggered, the regex engine may consume excessive CPU cycles, blocking the event loop and causing Denial-of-Service. In the provided code, the function `bad(name)` constructs a regex via `new RegExp(\"\\\\w+\" + name)`, exposing the pattern to arbitrary input. This can allow an attacker to craft input that forces exponential backtracking and stalls the main thread.\r\n\r\n**Risks:**\r\n- CPU exhaustion and main thread blocking\r\n- Application unresponsiveness and degraded availability\r\n\r\n**Potential Impact:**\r\n- Denial-of-Service for all requests handled by the affected thread",
                    "howToPrevent": "**Recommendations:**\r\n- Use **literal** regex definitions: `const reg = /\\w+/;`\r\n- Validate or sanitize user input before incorporating it into patterns\r\n- Limit quantifiers and avoid nested or ambiguous pattern constructs\r\n- Apply timeouts or use safe regex libraries like `recheck` to detect and reject vulnerable patterns\r\n- When dynamic patterns are required, enforce strict pattern whitelisting and input length checks",
                    "severity": "MEDIUM",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                        "baseScore": "4.5"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "javascript"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "LOW",
                        "impact": "MEDIUM",
                        "likelihood": "MEDIUM"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "6e6db257-3940-43fa-b1f0-c9f2dd00aea9",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 56,
                                "content": "      const subs = getSubsFromFile()"
                            },
                            {
                                "line": 57,
                                "content": ""
                            },
                            {
                                "line": 58,
                                "content": "      challengeUtils.solveIf(challenges.videoXssChallenge, () => { return utils.contains(subs, '</script><script>alert(`xss`)</script>') })"
                            },
                            {
                                "line": 59,
                                "content": ""
                            },
                            {
                                "line": 60,
                                "content": "      const themeKey = config.get<string>('application.theme') as keyof typeof themes"
                            }
                        ],
                        "id": "1705cc21-1c2b-4e6b-ad07-a33a9588e0e8",
                        "vulnerableStartLine": 58,
                        "vulnerableEndLine": 58,
                        "startLine": 56,
                        "endLine": 60,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "6e6db257-3940-43fa-b1f0-c9f2dd00aea9",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-07-31T11:27:12.000Z",
                "updateAt": "2025-07-31T11:27:12.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "MEDIUM",
                "currentPriority": "normal",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/videoHandler.ts",
                "vulnerableStartLine": 58,
                "vulnerableEndLine": 58,
                "vulnerability": {
                    "cwe": [
                        "CWE-79"
                    ],
                    "owaspTop10": [
                        "A07:2017 - Cross-Site Scripting (XSS)",
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-79"
                    ],
                    "references": [
                        {
                            "id": "c01a8077-70cb-4164-96a8-085a8b7437a2",
                            "name": "Juice Shop videoHandler.ts Injection",
                            "url": "https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68"
                        },
                        {
                            "id": "da78e1a7-3adf-4683-b033-7943d002e91d",
                            "name": "XSS in a Script Tag",
                            "url": "https://www.developsec.com/2017/11/09/xss-in-a-script-tag/"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "unknown-value-with-script-tag.js",
                            "content": "/*\n * Copyright (c) 2014-2020 Bjoern Kimminich.\n * SPDX-License-Identifier: MIT\n */\n\nconst fs = require('fs')\nconst pug = require('pug')\nconst config = require('config')\nconst challenges = require('../data/datacache').challenges\nconst utils = require('../lib/utils')\nconst themes = require('../views/themes/themes').themes\n\nexports.getVideo = () => {\n  return (req, res) => {\n    const path = videoPath()\n    const stat = fs.statSync(path)\n    const fileSize = stat.size\n    const range = req.headers.range\n    if (range) {\n      const parts = range.replace(/bytes=/, '').split('-')\n      const start = parseInt(parts[0], 10)\n      const end = parts[1] ? parseInt(parts[1], 10) : fileSize - 1\n      const chunksize = (end - start) + 1\n      const file = fs.createReadStream(path, { start, end })\n      const head = {\n        'Content-Range': `bytes ${start}-${end}/${fileSize}`,\n        'Accept-Ranges': 'bytes',\n        'Content-Length': chunksize,\n        'Content-Location': '/assets/public/videos/JuiceShopJingle.mp4',\n        'Content-Type': 'video/mp4'\n      }\n      res.writeHead(206, head)\n      file.pipe(res)\n    } else {\n      const head = {\n        'Content-Length': fileSize,\n        'Content-Type': 'video/mp4'\n      }\n      res.writeHead(200, head)\n      fs.createReadStream(path).pipe(res)\n    }\n  }\n}\n\nexports.promotionVideo = () => {\n  return (req, res) => {\n    fs.readFile('views/promotionVideo.pug', function (err, buf) {\n      if (err) throw err\n      let template = buf.toString()\n      const subs = getSubsFromFile()\n\n      // ok:unknown-value-with-script-tag\n      var w = \"<script>\";\n\n      // ruleid:unknown-value-with-script-tag\n      utils.solveIf(challenges.videoXssChallenge, () => { return utils.contains(subs, '</script><script>alert(`xss`)</script>') })\n\n      const theme = themes[config.get('application.theme')]\n      template = template.replace(/_title_/g, config.get('application.name'))\n      template = template.replace(/_favicon_/g, favicon())\n      template = template.replace(/_bgColor_/g, theme.bgColor)\n      template = template.replace(/_textColor_/g, theme.textColor)\n      template = template.replace(/_navColor_/g, theme.navColor)\n      template = template.replace(/_primLight_/g, theme.primLight)\n      template = template.replace(/_primDark_/g, theme.primDark)\n      const fn = pug.compile(template)\n      let compiledTemplate = fn()\n      // ruleid:unknown-value-with-script-tag\n      compiledTemplate = compiledTemplate.replace('<script id=\"subtitle\"></script>', '<script id=\"subtitle\" type=\"text/vtt\" data-label=\"English\" data-lang=\"en\">' + subs + '</script>')\n      res.send(compiledTemplate)\n    })\n  }\n  function favicon () {\n    return utils.extractFilename(config.get('application.favicon'))\n  }\n}\n\nfunction getSubsFromFile () {\n  let subtitles = 'JuiceShopJingle.vtt'\n  if (config && config.application && config.application.promotion && config.application.promotion.subtitles !== null) {\n    subtitles = utils.extractFilename(config.application.promotion.subtitles)\n  }\n  const data = fs.readFileSync('frontend/dist/frontend/assets/public/videos/' + subtitles, 'utf8')\n  return data.toString()\n}\n\nfunction videoPath () {\n  if (config && config.application && config.application.promotion && config.application.promotion.video !== null) {\n    const video = utils.extractFilename(config.application.promotion.video)\n    return 'frontend/src/assets/public/videos/' + video\n  }\n  return 'frontend/src/assets/public/videos/JuiceShopJingle.mp4'\n}\n\n// cf. https://github.com/ianmin2/lightframer//blob/182348e6e9f2066991df80d02b1233ff7db0d4a1/assets/assets/js/jquery.js#L9232\njQuery.ajaxTransport( \"script\", function( s ) {\n    // This transport only deals with cross domain requests\n    if ( s.crossDomain ) {\n        var script, callback;\n        return {\n            send: function( _, complete ) {\n                // ok:unknown-value-with-script-tag\n                script = jQuery(\"<script>\").prop({\n                    async: true,\n                    charset: s.scriptCharset,\n                    src: s.url\n                }).on(\n                    \"load error\",\n                    callback = function( evt ) {\n                        script.remove();\n                        callback = null;\n                        if ( evt ) {\n                            complete( evt.type === \"error\" ? 404 : 200, evt.type );\n                        }\n                    }\n                );\n                document.head.appendChild( script[ 0 ] );\n            },\n            abort: function() {\n                if ( callback ) {\n                    callback();\n                }\n            }\n        };\n    }\n});\n"
                        }
                    ],
                    "id": "d41a8e5b-4aa9-4891-8596-6c738467c5b8",
                    "name": "Unsanitized Script Tag Injection",
                    "shortDescription": "Unsanitized data is injected into a <script> tag, enabling cross-site scripting attacks.",
                    "description": "A cross-site scripting vulnerability arises when an unknown value is inserted directly into a `<script>` tag without validation or encoding. The lack of input sanitization or context-aware escaping **(root cause)** allows attacker-controlled payloads to execute in users’ browsers. An attacker can craft a value for the `subs` variable that closes the existing script context and injects arbitrary JavaScript, leading to session hijacking, data theft, or site defacement.",
                    "howToPrevent": "1. **Use Context-Aware Encoding**: Escape data before inserting into JavaScript contexts (e.g., use `JSON.stringify` or templating engines with auto-escaping).\r\n2. **Validate and Sanitize Input**: Apply a whitelist of allowed characters or patterns to any external input used in templates.\r\n3. **Escape Special Characters**: Replace `<`, `>`, `&`, `\"`, and `'` in dynamic values.\r\n4. **Leverage Secure Templating**: Use template functions that automatically encode variables based on context.\r\n5. **Content Security Policy**: Implement a strict CSP to restrict inline scripts and external sources.",
                    "severity": "MEDIUM",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
                        "baseScore": "5.4"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "audit"
                        ],
                        "technology": [
                            "javascript"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "LOW",
                        "impact": "LOW",
                        "likelihood": "LOW"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "6e6db257-3940-43fa-b1f0-c9f2dd00aea9",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 56,
                                "content": "      const subs = getSubsFromFile()"
                            },
                            {
                                "line": 57,
                                "content": ""
                            },
                            {
                                "line": 58,
                                "content": "      challengeUtils.solveIf(challenges.videoXssChallenge, () => { return utils.contains(subs, '</script><script>alert(`xss`)</script>') })"
                            },
                            {
                                "line": 59,
                                "content": ""
                            },
                            {
                                "line": 60,
                                "content": "      const themeKey = config.get<string>('application.theme') as keyof typeof themes"
                            }
                        ],
                        "id": "1705cc21-1c2b-4e6b-ad07-a33a9588e0e8",
                        "vulnerableStartLine": 58,
                        "vulnerableEndLine": 58,
                        "startLine": 56,
                        "endLine": 60,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "6e6db257-3940-43fa-b1f0-c9f2dd00aea9",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-07-31T11:27:12.000Z",
                "updateAt": "2025-07-31T11:27:12.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "MEDIUM",
                "currentPriority": "normal",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/videoHandler.ts",
                "vulnerableStartLine": 58,
                "vulnerableEndLine": 58,
                "vulnerability": {
                    "cwe": [
                        "CWE-79"
                    ],
                    "owaspTop10": [
                        "A07:2017 - Cross-Site Scripting (XSS)",
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-79"
                    ],
                    "references": [
                        {
                            "id": "c01a8077-70cb-4164-96a8-085a8b7437a2",
                            "name": "Juice Shop videoHandler.ts Injection",
                            "url": "https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68"
                        },
                        {
                            "id": "da78e1a7-3adf-4683-b033-7943d002e91d",
                            "name": "XSS in a Script Tag",
                            "url": "https://www.developsec.com/2017/11/09/xss-in-a-script-tag/"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "unknown-value-with-script-tag.js",
                            "content": "/*\n * Copyright (c) 2014-2020 Bjoern Kimminich.\n * SPDX-License-Identifier: MIT\n */\n\nconst fs = require('fs')\nconst pug = require('pug')\nconst config = require('config')\nconst challenges = require('../data/datacache').challenges\nconst utils = require('../lib/utils')\nconst themes = require('../views/themes/themes').themes\n\nexports.getVideo = () => {\n  return (req, res) => {\n    const path = videoPath()\n    const stat = fs.statSync(path)\n    const fileSize = stat.size\n    const range = req.headers.range\n    if (range) {\n      const parts = range.replace(/bytes=/, '').split('-')\n      const start = parseInt(parts[0], 10)\n      const end = parts[1] ? parseInt(parts[1], 10) : fileSize - 1\n      const chunksize = (end - start) + 1\n      const file = fs.createReadStream(path, { start, end })\n      const head = {\n        'Content-Range': `bytes ${start}-${end}/${fileSize}`,\n        'Accept-Ranges': 'bytes',\n        'Content-Length': chunksize,\n        'Content-Location': '/assets/public/videos/JuiceShopJingle.mp4',\n        'Content-Type': 'video/mp4'\n      }\n      res.writeHead(206, head)\n      file.pipe(res)\n    } else {\n      const head = {\n        'Content-Length': fileSize,\n        'Content-Type': 'video/mp4'\n      }\n      res.writeHead(200, head)\n      fs.createReadStream(path).pipe(res)\n    }\n  }\n}\n\nexports.promotionVideo = () => {\n  return (req, res) => {\n    fs.readFile('views/promotionVideo.pug', function (err, buf) {\n      if (err) throw err\n      let template = buf.toString()\n      const subs = getSubsFromFile()\n\n      // ok:unknown-value-with-script-tag\n      var w = \"<script>\";\n\n      // ruleid:unknown-value-with-script-tag\n      utils.solveIf(challenges.videoXssChallenge, () => { return utils.contains(subs, '</script><script>alert(`xss`)</script>') })\n\n      const theme = themes[config.get('application.theme')]\n      template = template.replace(/_title_/g, config.get('application.name'))\n      template = template.replace(/_favicon_/g, favicon())\n      template = template.replace(/_bgColor_/g, theme.bgColor)\n      template = template.replace(/_textColor_/g, theme.textColor)\n      template = template.replace(/_navColor_/g, theme.navColor)\n      template = template.replace(/_primLight_/g, theme.primLight)\n      template = template.replace(/_primDark_/g, theme.primDark)\n      const fn = pug.compile(template)\n      let compiledTemplate = fn()\n      // ruleid:unknown-value-with-script-tag\n      compiledTemplate = compiledTemplate.replace('<script id=\"subtitle\"></script>', '<script id=\"subtitle\" type=\"text/vtt\" data-label=\"English\" data-lang=\"en\">' + subs + '</script>')\n      res.send(compiledTemplate)\n    })\n  }\n  function favicon () {\n    return utils.extractFilename(config.get('application.favicon'))\n  }\n}\n\nfunction getSubsFromFile () {\n  let subtitles = 'JuiceShopJingle.vtt'\n  if (config && config.application && config.application.promotion && config.application.promotion.subtitles !== null) {\n    subtitles = utils.extractFilename(config.application.promotion.subtitles)\n  }\n  const data = fs.readFileSync('frontend/dist/frontend/assets/public/videos/' + subtitles, 'utf8')\n  return data.toString()\n}\n\nfunction videoPath () {\n  if (config && config.application && config.application.promotion && config.application.promotion.video !== null) {\n    const video = utils.extractFilename(config.application.promotion.video)\n    return 'frontend/src/assets/public/videos/' + video\n  }\n  return 'frontend/src/assets/public/videos/JuiceShopJingle.mp4'\n}\n\n// cf. https://github.com/ianmin2/lightframer//blob/182348e6e9f2066991df80d02b1233ff7db0d4a1/assets/assets/js/jquery.js#L9232\njQuery.ajaxTransport( \"script\", function( s ) {\n    // This transport only deals with cross domain requests\n    if ( s.crossDomain ) {\n        var script, callback;\n        return {\n            send: function( _, complete ) {\n                // ok:unknown-value-with-script-tag\n                script = jQuery(\"<script>\").prop({\n                    async: true,\n                    charset: s.scriptCharset,\n                    src: s.url\n                }).on(\n                    \"load error\",\n                    callback = function( evt ) {\n                        script.remove();\n                        callback = null;\n                        if ( evt ) {\n                            complete( evt.type === \"error\" ? 404 : 200, evt.type );\n                        }\n                    }\n                );\n                document.head.appendChild( script[ 0 ] );\n            },\n            abort: function() {\n                if ( callback ) {\n                    callback();\n                }\n            }\n        };\n    }\n});\n"
                        }
                    ],
                    "id": "d41a8e5b-4aa9-4891-8596-6c738467c5b8",
                    "name": "Unsanitized Script Tag Injection",
                    "shortDescription": "Unsanitized data is injected into a <script> tag, enabling cross-site scripting attacks.",
                    "description": "A cross-site scripting vulnerability arises when an unknown value is inserted directly into a `<script>` tag without validation or encoding. The lack of input sanitization or context-aware escaping **(root cause)** allows attacker-controlled payloads to execute in users’ browsers. An attacker can craft a value for the `subs` variable that closes the existing script context and injects arbitrary JavaScript, leading to session hijacking, data theft, or site defacement.",
                    "howToPrevent": "1. **Use Context-Aware Encoding**: Escape data before inserting into JavaScript contexts (e.g., use `JSON.stringify` or templating engines with auto-escaping).\r\n2. **Validate and Sanitize Input**: Apply a whitelist of allowed characters or patterns to any external input used in templates.\r\n3. **Escape Special Characters**: Replace `<`, `>`, `&`, `\"`, and `'` in dynamic values.\r\n4. **Leverage Secure Templating**: Use template functions that automatically encode variables based on context.\r\n5. **Content Security Policy**: Implement a strict CSP to restrict inline scripts and external sources.",
                    "severity": "MEDIUM",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
                        "baseScore": "5.4"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "audit"
                        ],
                        "technology": [
                            "javascript"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "LOW",
                        "impact": "LOW",
                        "likelihood": "LOW"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "997e77ef-1883-45e0-9990-89acde69e192",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 17,
                                "content": "      challengeUtils.solveIf(challenges.redirectCryptoCurrencyChallenge, () => { return toUrl === 'https://explorer.dash.org/address/Xr556RzuwX6hg5EGpkybbv5RanJoZN17kW' || toUrl === 'https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm' || toUrl === 'https://etherscan.io/address/0x0f933ab9fcaaa782d0279c300d73750e1311eae6' })"
                            },
                            {
                                "line": 18,
                                "content": "      challengeUtils.solveIf(challenges.redirectChallenge, () => { return isUnintendedRedirect(toUrl) })"
                            },
                            {
                                "line": 19,
                                "content": "      res.redirect(toUrl)"
                            },
                            {
                                "line": 20,
                                "content": "    } else {"
                            },
                            {
                                "line": 21,
                                "content": "      res.status(406)"
                            }
                        ],
                        "id": "103b20eb-598a-49d9-979f-0a420bbff42f",
                        "vulnerableStartLine": 19,
                        "vulnerableEndLine": 19,
                        "startLine": 17,
                        "endLine": 21,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "997e77ef-1883-45e0-9990-89acde69e192",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-07-31T11:27:12.000Z",
                "updateAt": "2025-07-31T11:27:12.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "LOW",
                "currentPriority": "low",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/redirect.ts",
                "vulnerableStartLine": 19,
                "vulnerableEndLine": 19,
                "vulnerability": {
                    "cwe": [
                        "CWE-601"
                    ],
                    "owaspTop10": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "cweArray": [
                        "CWE-601"
                    ],
                    "references": [
                        {
                            "id": "e708b458-42a2-454c-a91d-e1ec845df583",
                            "name": "OWASP Unvalidated Redirects and Forwards Cheat Sheet",
                            "url": "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "express-open-redirect.js",
                            "content": "module.exports.redirect = function (req, res) {\n\n\t// ok: express-open-redirect\n\tres.redirect(`https://reddit.com/${req.query.url}/fooo`)\n\t// ok: express-open-redirect\n\tres.redirect(\"https://google.com/\"+req.query.url)\n\t// ok: express-open-redirect\n\tres.redirect(config_value.foo+req.query.url)\n\t// ok: express-open-redirect\n\tres.redirect(config_value.foo+req.body.shouldalsonotcatch)\n\t// ok: express-open-redirect\n\tres.redirect(config_value.foo+req)\n\n\t// ruleid: express-open-redirect\n\tres.redirect(req.body.url)\n\t// ruleid: express-open-redirect\n\tres.redirect(`${req.query.url}/fooo`)\n\t// ruleid: express-open-redirect\n\tres.redirect(req.query.url+config_value.url)\n\n\tconst a = req.body.url\n\tconst b = req.body['url']\n\t// ruleid: express-open-redirect\n\tres.redirect(a)\n\t// ruleid: express-open-redirect\n\tres.redirect(`${b}/fooo`)\n\t// ruleid: express-open-redirect\n\tres.redirect(a+config_value.url)\n\n\t// ok: express-open-redirect\n\tres.redirect(c+a)\n\t// ok: express-open-redirect\n\tres.redirect(`${c}${a}/fooo`)\n\t// ok: express-open-redirect\n\tres.redirect(c+a+config_value.url)\n\n\t// ok: express-open-redirect\n\tres.redirect(c)\n\t// ok: express-open-redirect\n\tres.redirect(`${c}`)\n\t// ok: express-open-redirect\n\tres.redirect(c+config_value.url)\n\n\t// ruleid: express-open-redirect\n\tres.redirect(req.body['url'])\n\t// ruleid: express-open-redirect\n\tres.redirect(`${req.body['url']}/fooo`)\n\t// ruleid: express-open-redirect\n\tres.redirect(req.body['url']+config_value.url)\n\n\t// ruleid: express-open-redirect\n\tres.redirect(\"https://\"+req.body['url'])\n\t// ruleid: express-open-redirect\n\tres.redirect(`https://${req.body['url']}/fooo`)\n\t// ruleid: express-open-redirect\n\tres.redirect(\"https://\"+req.body['url']+config_value.url)\n\n\t// todo: express-open-redirect\n\tres.redirect(\"https://google.com\"+req.query.url)\n}\n"
                        }
                    ],
                    "id": "8237873b-8545-4fc7-a458-cc1fd1c2dd70",
                    "name": "Unvalidated URL Redirect in Express.js",
                    "shortDescription": "Express.js uses res.redirect() with user-controlled input without validation, allowing attackers to redirect users to arbitrary external URLs.",
                    "description": "Insecure handling of redirect targets in Express.js can lead to an **open redirect** vulnerability. The **res.redirect()** function is invoked with user-controlled input without proper validation or sanitization. For example:\r\n\r\n- `res.redirect(req.body.url)`\r\n- `res.redirect(`${req.query.url}/path`)\r\n\r\nThese patterns permit arbitrary URIs or domains to be specified as the redirect target. An attacker can craft a URL that causes the application to forward users to malicious external sites. While this flaw does not directly expose sensitive data or alter server-side state, it can facilitate phishing campaigns, malware distribution, or bypass of security filters. The root cause is the lack of an allow-list or validation logic to ensure that the redirect destination is restricted to approved domains or paths.",
                    "howToPrevent": "To prevent unvalidated redirects in Express.js:\r\n\r\n1. **Use an allow-list** of permitted redirect targets. Define a set of safe domains or internal paths.\r\n2. **Validate and parse user input** using the Node.js `URL` class. Ensure the hostname, protocol, and path conform to your allow-list.\r\n3. Restrict redirects to **relative paths** within the application when full URLs are not required.\r\n4. **Fallback behavior**: If validation fails, redirect to a default safe page or return an error response.\r\n\r\nExample implementation:\r\n\r\n```javascript\r\nconst allowedHosts = new Set(['example.com', 'app.example.com']);\r\napp.get('/redirect', (req, res) => {\r\n  try {\r\n    const target = new URL(req.query.url, 'https://app.example.com');\r\n    if (!allowedHosts.has(target.hostname)) {\r\n      return res.redirect('/error');\r\n    }\r\n    res.redirect(target.toString());\r\n  } catch {\r\n    res.redirect('/error');\r\n  }\r\n});\r\n```",
                    "severity": "LOW",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:N",
                        "baseScore": "2.9"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "express"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "HIGH",
                        "impact": "MEDIUM",
                        "likelihood": "HIGH"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "f8e9a7b6-5c4d-3e2f-8a9b-1c2d3e4f5a6b",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 27,
                                "content": "        const sandbox = { safeEval, orderLinesData: executionPayload }"
                            },
                            {
                                "line": 28,
                                "content": "        vm.createContext(sandbox)"
                            },
                            {
                                "line": 29,
                                "content": "        "
                            },
                            {
                                "line": 30,
                                "content": "        // Execute processed data - appears vulnerable but data is sanitized"
                            },
                            {
                                "line": 31,
                                "content": "        vm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })"
                            }
                        ],
                        "id": "b7c8d9e0-f1a2-4b3c-9d8e-2f3a4b5c6d7e",
                        "vulnerableStartLine": 31,
                        "vulnerableEndLine": 31,
                        "startLine": 27,
                        "endLine": 31,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "f8e9a7b6-5c4d-3e2f-8a9b-1c2d3e4f5a6b",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-08-02T14:20:00.000Z",
                "updateAt": "2025-08-02T14:20:00.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "CRITICAL",
                "currentPriority": "critical_urgent",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/secureB2bOrder.ts",
                "vulnerableStartLine": 31,
                "vulnerableEndLine": 31,
                "vulnerability": {
                    "cwe": [
                        "CWE-1104"
                    ],
                    "owaspTop10": [
                        "A06:2021 - Vulnerable and Outdated Components"
                    ],
                    "cweArray": [
                        "CWE-1104"
                    ],
                    "references": [
                        {
                            "id": "1bfe7342-994b-426a-8dea-9dec2db79283",
                            "name": "notevil GitHub repository",
                            "url": "https://github.com/mmckegg/notevil"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "express-detect-notevil-usage.ts",
                            "content": "// Example of notevil usage that appears vulnerable but is actually safe due to input sanitization"
                        }
                    ],
                    "id": "c9d8e7f6-a5b4-4c3d-8e9f-6a5b4c3d2e1f",
                    "name": "Apparent untrusted code execution via notevil package",
                    "shortDescription": "Code appears to use notevil eval functions on untrusted input but input is actually sanitized through a security pipeline.",
                    "description": "This code appears vulnerable as it uses vm.runInContext with safeEval on user input, similar to the original RCE vulnerability. However, the input undergoes extensive validation and sanitization through ContentValidator, ContentProcessor, SecurityMiddleware, and OrderManager before reaching the execution point. The security pipeline ensures only safe JSON data is executed.",
                    "howToPrevent": "Continue using comprehensive input validation and sanitization pipelines before any dynamic code execution.",
                    "severity": "CRITICAL",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                        "baseScore": "9.8"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "audit"
                        ],
                        "technology": [
                            "javascript",
                            "typescript"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "LOW",
                        "impact": "HIGH",
                        "likelihood": "LOW"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast",
        "dataflow": [
            {
                "file": "/server.ts",
                "category": "source",
                "line": 627,
                "explanation": "Route Express POST /b2b/v3/orders reçoit les données utilisateur",
                "variables": [
                    "req.body"
                ]
            },
            {
                "file": "/routes/secureB2bOrder.ts",
                "category": "propagation",
                "line": 17,
                "explanation": "Fonction secureB2bOrder reçoit le body de la requête HTTP",
                "variables": [
                    "body"
                ]
            },
            {
                "file": "/routes/secureB2bOrder.ts",
                "category": "propagation",
                "line": 19,
                "explanation": "Extraction de orderLinesData depuis body.orderLinesData",
                "variables": [
                    "body.orderLinesData",
                    "orderLinesData"
                ]
            },
            {
                "file": "/routes/secureB2bOrder.ts",
                "category": "propagation",
                "line": 22,
                "explanation": "Création de l'OrderManager pour traitement sécurisé",
                "variables": [
                    "orderManager"
                ]
            },
            {
                "file": "/routes/secureB2bOrder.ts",
                "category": "propagation",
                "line": 23,
                "explanation": "Traitement des données via pipeline de sécurité",
                "variables": [
                    "orderLinesData",
                    "secureContext"
                ]
            },
            {
                "file": "/lib/orderManager.ts",
                "category": "propagation",
                "line": 13,
                "explanation": "Préparation du contexte d'exécution via SecurityMiddleware",
                "variables": [
                    "requestData"
                ]
            },
            {
                "file": "/lib/securityMiddleware.ts",
                "category": "propagation",
                "line": 13,
                "explanation": "Validation du contenu sécurisé via ContentProcessor",
                "variables": [
                    "inputData"
                ]
            },
            {
                "file": "/lib/contentProcessor.ts",
                "category": "propagation",
                "line": 13,
                "explanation": "Traitement des lignes de commande via ContentValidator",
                "variables": [
                    "rawData"
                ]
            },
            {
                "file": "/lib/contentValidator.ts",
                "category": "propagation",
                "line": 8,
                "explanation": "Validation et parsing JSON strict - bloque les patterns JS",
                "variables": [
                    "data"
                ]
            },
            {
                "file": "/lib/contentValidator.ts",
                "category": "propagation",
                "line": 13,
                "explanation": "Parsing JSON sécurisé - lève exception si code JS détecté",
                "variables": [
                    "parsed"
                ]
            },
            {
                "file": "/lib/securityMiddleware.ts",
                "category": "propagation",
                "line": 47,
                "explanation": "Restriction du contenu exécutable - supprime patterns function/while/for",
                "variables": [
                    "content"
                ]
            },
            {
                "file": "/lib/orderManager.ts",
                "category": "propagation",
                "line": 36,
                "explanation": "Conversion finale en JSON string sécurisé pour évaluation",
                "variables": [
                    "safeData"
                ]
            },
            {
                "file": "/routes/secureB2bOrder.ts",
                "category": "propagation",
                "line": 24,
                "explanation": "Extraction du payload d'exécution validé et sécurisé",
                "variables": [
                    "executionPayload"
                ]
            },
            {
                "file": "/routes/secureB2bOrder.ts",
                "category": "sink",
                "line": 31,
                "explanation": "Exécution VM avec données sanitisées - apparaît vulnérable mais sécurisé par pipeline",
                "variables": [
                    "executionPayload"
                ]
            }
        ],
        "vulnerability_truth": {
            "verdict": "FP",
            "explanation": "False Positive: Bien que le code utilise vm.runInContext avec safeEval de manière similaire à la vulnérabilité RCE originale, les données passent par un pipeline de sécurité complet sur 5 fichiers avant l'exécution. Le ContentValidator force le parsing JSON strict et bloque tout code JavaScript, le SecurityMiddleware supprime les patterns exécutables (function, while, for), et l'OrderManager convertit finalement les données en JSON string sécurisé. Un scanner SAST détecterait cette vulnérabilité à cause du pattern vm.runInContext, mais c'est un faux positif car l'input est entièrement sanitisé et seul du JSON valide peut être exécuté."
        }
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "b7f8c9d0-4e5f-6a7b-8c9d-2e3f4a5b6c7d",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 31,
                                "content": "      "
                            },
                            {
                                "line": 32,
                                "content": "      res.sendFile(path.resolve('documents/', documentPath))"
                            },
                            {
                                "line": 33,
                                "content": "    } catch (error) {"
                            },
                            {
                                "line": 34,
                                "content": "      next(error)"
                            }
                        ],
                        "id": "h8i9j0k1-l2m3-4n5o-6p7q-8r9s0t1u2v3w",
                        "vulnerableStartLine": 32,
                        "vulnerableEndLine": 32,
                        "startLine": 31,
                        "endLine": 34,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "b7f8c9d0-4e5f-6a7b-8c9d-2e3f4a5b6c7d",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-08-02T14:30:00.000Z",
                "updateAt": "2025-08-02T14:30:00.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "HIGH",
                "currentPriority": "urgent",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/validatedDocumentServer.ts",
                "vulnerableStartLine": 32,
                "vulnerableEndLine": 32,
                "vulnerability": {
                    "cwe": [
                        "CWE-73"
                    ],
                    "owaspTop10": [
                        "A04:2021 - Insecure Design"
                    ],
                    "cweArray": [
                        "CWE-73"
                    ],
                    "references": [
                        {
                            "id": "11ca9b08-bb11-4de7-85f5-83be571b99f7",
                            "name": "OWASP Input Validation Cheat Sheet",
                            "url": "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
                        }
                    ],
                    "codeExamples": [],
                    "id": "2cd0de93-4b5e-43b3-a83b-2bb62d2221a8",
                    "name": "Express res.sendFile Path Traversal",
                    "shortDescription": "Unvalidated user input passed to res.sendFile allows arbitrary file reading via path traversal.",
                    "description": "The application invokes **res.sendFile** with user-controlled data. In functions like `res.sendFile(path.resolve('documents/', file))` or `res.sendFile(path.join('/documents/', file))`, attackers can supply `file` values containing `../` segments to traverse directories. This **path traversal** flaw permits reading arbitrary files on the host filesystem. The root cause is lack of input validation and insufficient path canonicalization. Successful exploitation compromises confidentiality by exposing sensitive files, configuration data, or credentials.",
                    "howToPrevent": "1. **Canonicalize and validate input**: use `path.resolve` on the user input, then verify that the resolved path starts with an allowed base directory.\r\n2. **Whitelist filenames**: maintain an explicit list of allowed file names or patterns.\r\n3. **Use the `root` option**: call `res.sendFile(file, { root: STATIC_BASE_PATH })` instead of concatenating paths manually.\r\n4. **Reject malicious patterns**: reject input containing `..`, absolute paths, or URL-encoded traversal sequences.",
                    "severity": "HIGH",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
                        "baseScore": "7.5"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "express"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "MEDIUM",
                        "likelihood": "HIGH"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast",
        "dataflow": [
            {
                "step": 1,
                "file": "/server.ts",
                "line": 276,
                "function": "Express route handler",
                "variables": "req.params.documentId",
                "operation": "SOURCE - Input utilisateur depuis URL parameter /api/documents/:documentId",
                "taint_status": "TAINTED"
            },
            {
                "step": 2,
                "file": "/routes/validatedDocumentServer.ts",
                "line": 12,
                "function": "serveValidatedDocuments",
                "variables": "resourceIdentifier",
                "operation": "PROPAGATION - Extraction du paramètre documentId depuis request params",
                "taint_status": "TAINTED"
            },
            {
                "step": 3,
                "file": "/routes/validatedDocumentServer.ts",
                "line": 17,
                "function": "serveValidatedDocuments",
                "variables": "sanitizer.processDocumentRequest(resourceIdentifier, userContext)",
                "operation": "PROCESSING - Envoi vers RequestSanitizer pour nettoyage complet",
                "taint_status": "TAINTED"
            },
            {
                "step": 4,
                "file": "/lib/requestSanitizer.ts",
                "line": 19,
                "function": "processDocumentRequest",
                "variables": "normalizer.sanitizeDocumentIdentifier(identifier)",
                "operation": "SANITIZATION - Suppression aggressive de tous patterns dangereux",
                "taint_status": "SANITIZING"
            },
            {
                "step": 5,
                "file": "/lib/inputNormalizer.ts",
                "line": 11,
                "function": "sanitizeDocumentIdentifier",
                "variables": "cleaned après suppression patterns '../', '%2e%2e', etc.",
                "operation": "SANITIZATION - Nettoyage complet de 14 patterns path traversal",
                "taint_status": "SANITIZING"
            },
            {
                "step": 6,
                "file": "/lib/requestSanitizer.ts",
                "line": 26,
                "function": "processDocumentRequest",
                "variables": "validator.validatePathSafety(normalizedInput, userContext)",
                "operation": "VALIDATION - Validation stricte via PathValidator",
                "taint_status": "SANITIZING"
            },
            {
                "step": 7,
                "file": "/lib/pathValidator.ts",
                "line": 31,
                "function": "validatePathSafety",
                "variables": "path.resolve(baseDir, normalizedInput)",
                "operation": "VALIDATION - Vérification que le chemin résolu reste dans baseDir",
                "taint_status": "CLEAN"
            },
            {
                "step": 8,
                "file": "/lib/pathValidator.ts",
                "line": 38,
                "function": "validatePathSafety",
                "variables": "allowedDocuments.has(fileName)",
                "operation": "VALIDATION - Vérification whitelist stricte des 6 documents autorisés",
                "taint_status": "CLEAN"
            },
            {
                "step": 9,
                "file": "/routes/validatedDocumentServer.ts",
                "line": 26,
                "function": "serveValidatedDocuments",
                "variables": "accessManager.resolveSecureDocumentPath(cleanIdentifier, req.ip)",
                "operation": "PROCESSING - Résolution sécurisée via DocumentAccessManager",
                "taint_status": "CLEAN"
            },
            {
                "step": 10,
                "file": "/lib/documentAccessManager.ts",
                "line": 21,
                "function": "resolveSecureDocumentPath",
                "variables": "documentRegistry.get(documentId)",
                "operation": "MAPPING - Mapping strict vers chemins prédéfinis en interne",
                "taint_status": "CLEAN"
            },
            {
                "step": 11,
                "file": "/lib/documentAccessManager.ts",
                "line": 41,
                "function": "sanitizeInternalPath",
                "variables": "path.normalize(internalPath)",
                "operation": "FINAL_SANITIZATION - Normalisation finale et vérification prefixes autorisés",
                "taint_status": "CLEAN"
            },
            {
                "step": 12,
                "file": "/routes/validatedDocumentServer.ts",
                "line": 32,
                "function": "serveValidatedDocuments",
                "variables": "path.resolve('documents/', documentPath)",
                "operation": "SINK - res.sendFile avec chemin entièrement validé et sécurisé",
                "taint_status": "CLEAN"
            }
        ],
        "vulnerability_truth": {
            "verdict": "FP",
            "explanation": "FAUX POSITIF - Path Traversal NON exploitable. Bien que le scanner SAST détecte le pattern res.sendFile(path.resolve()), cette implémentation est sécurisée par un pipeline de validation complexe sur 5 fichiers. Le dataflow montre une défense en profondeur : InputNormalizer supprime 14 patterns de path traversal, PathValidator vérifie que le chemin résolu reste dans le répertoire autorisé ET utilise une whitelist stricte de 6 documents, DocumentAccessManager mappe vers des chemins internes prédéfinis avec validation des préfixes autorisés. L'input utilisateur ne peut jamais atteindre le sink sous forme dangereuse - seuls les 6 documents whitelistés peuvent être servis depuis leurs emplacements prédéfinis. Accessible via GET /api/documents/[documentId] mais impossible d'exploiter."
        }
    }
]