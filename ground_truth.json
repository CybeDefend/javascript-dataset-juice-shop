[
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "69c8fc87-cacd-49bf-a63e-125c2017b95e",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 76,
                                "content": "    if (new RegExp(`vuln-code-snippet vuln-line.*${challengeKey}`).exec(lines[i]) != null) {"
                            },
                            {
                                "line": 77,
                                "content": "      vulnLines.push(i + 1)"
                            },
                            {
                                "line": 78,
                                "content": "    } else if (new RegExp(`vuln-code-snippet neutral-line.*${challengeKey}`).exec(lines[i]) != null) {"
                            },
                            {
                                "line": 79,
                                "content": "      neutralLines.push(i + 1)"
                            },
                            {
                                "line": 80,
                                "content": "    }"
                            }
                        ],
                        "id": "446f0bd9-2faa-4df9-9b41-93bdfd015851",
                        "vulnerableStartLine": 78,
                        "vulnerableEndLine": 78,
                        "startLine": 76,
                        "endLine": 80,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "69c8fc87-cacd-49bf-a63e-125c2017b95e",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-07-31T11:27:11.000Z",
                "updateAt": "2025-07-31T11:27:11.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "MEDIUM",
                "currentPriority": "normal",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/lib/codingChallenges.ts",
                "vulnerableStartLine": 78,
                "vulnerableEndLine": 78,
                "vulnerability": {
                    "cwe": [
                        "CWE-1333"
                    ],
                    "owaspTop10": [
                        "A05:2021 - Security Misconfiguration",
                        "A06:2017 - Security Misconfiguration"
                    ],
                    "cweArray": [
                        "CWE-1333"
                    ],
                    "references": [
                        {
                            "id": "0512582f-2c8c-468d-a865-996f4a514406",
                            "name": "detect-non-literal-regexp rule in ESLint Plugin Security",
                            "url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js"
                        },
                        {
                            "id": "22f05b6f-0c74-49f2-84e7-65b4a8305524",
                            "name": "Regular Expression Denial of Service - OWASP",
                            "url": "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "detect-non-literal-regexp.js",
                            "content": "function ok (name) {\n  //ok: detect-non-literal-regexp\n  const reg = new RegExp(\"\\\\w+\")\n  return reg.exec(name)\n}\n\nfunction bad (name) {\n  //ruleid: detect-non-literal-regexp\n  const reg = new RegExp(\"\\\\w+\" + name)\n  return reg.exec(name)\n}\n\nfunction jsliteral (name) {\n  const exp = /a.*/;\n  //ok: detect-non-literal-regexp\n  const reg = new RegExp(exp);\n  return reg.exec(name);\n}\n"
                        }
                    ],
                    "id": "80942215-d260-44c1-b09f-7bbf7055f7aa",
                    "name": "Dynamic RegExp Creation Leading to ReDoS",
                    "shortDescription": "Dynamic regex creation from untrusted input can lead to Regular Expression Denial-of-Service that blocks the main thread.",
                    "description": "**Dynamic pattern construction** using the **RegExp** constructor with user-controlled data can introduce patterns susceptible to **catastrophic backtracking**. When triggered, the regex engine may consume excessive CPU cycles, blocking the event loop and causing Denial-of-Service. In the provided code, the function `bad(name)` constructs a regex via `new RegExp(\"\\\\w+\" + name)`, exposing the pattern to arbitrary input. This can allow an attacker to craft input that forces exponential backtracking and stalls the main thread.\r\n\r\n**Risks:**\r\n- CPU exhaustion and main thread blocking\r\n- Application unresponsiveness and degraded availability\r\n\r\n**Potential Impact:**\r\n- Denial-of-Service for all requests handled by the affected thread",
                    "howToPrevent": "**Recommendations:**\r\n- Use **literal** regex definitions: `const reg = /\\w+/;`\r\n- Validate or sanitize user input before incorporating it into patterns\r\n- Limit quantifiers and avoid nested or ambiguous pattern constructs\r\n- Apply timeouts or use safe regex libraries like `recheck` to detect and reject vulnerable patterns\r\n- When dynamic patterns are required, enforce strict pattern whitelisting and input length checks",
                    "severity": "MEDIUM",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                        "baseScore": "4.5"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "javascript"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "LOW",
                        "impact": "MEDIUM",
                        "likelihood": "MEDIUM"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast",
        "dataflow": [
            {
                "file": "/server.ts",
                "category": "source",
                "line": 669,
                "explanation": "Route HTTP GET /snippets/:challenge reçoit le paramètre challenge",
                "variables": [
                    "req.params.challenge"
                ]
            },
            {
                "file": "/routes/vulnCodeSnippet.ts",
                "category": "propagation",
                "line": 33,
                "explanation": "Le paramètre challenge est passé à retrieveCodeSnippet",
                "variables": [
                    "challengeKey"
                ]
            },
            {
                "file": "/routes/vulnCodeSnippet.ts",
                "category": "propagation",
                "line": 34,
                "explanation": "Appel de getCodeChallenges pour obtenir les snippets de code",
                "variables": [
                    "codeChallenges"
                ]
            },
            {
                "file": "/lib/codingChallenges.ts",
                "category": "propagation",
                "line": 101,
                "explanation": "Lecture des fichiers et extraction des clés via findFilesWithCodeChallenges",
                "variables": [
                    "filesWithCodeChallenges"
                ]
            },
            {
                "file": "/lib/codingChallenges.ts",
                "category": "propagation",
                "line": 102,
                "explanation": "Traitement de chaque fichier via getCodeChallengesFromFile",
                "variables": [
                    "fileMatch"
                ]
            },
            {
                "file": "/lib/codingChallenges.ts",
                "category": "propagation",
                "line": 50,
                "explanation": "Extraction des clés via regex sur le contenu de fichier statique",
                "variables": [
                    "challengeKeyRegex",
                    "challenges"
                ]
            },
            {
                "file": "/lib/codingChallenges.ts",
                "category": "propagation",
                "line": 55,
                "explanation": "Appel de getCodingChallengeFromFileContent avec chaque challengeKey extrait",
                "variables": [
                    "challengeKey"
                ]
            },
            {
                "file": "/lib/codingChallenges.ts",
                "category": "sink",
                "line": 78,
                "explanation": "Utilisation du challengeKey dans new RegExp - non exploitable car provient de fichiers statiques",
                "variables": [
                    "challengeKey"
                ]
            }
        ],
        "vulnerability_truth": {
            "verdict": "FP",
            "explanation": "Faux Positif: Bien que le code utilise new RegExp avec une variable challengeKey, cette variable ne provient pas d'un input utilisateur contrôlable. Les challengeKey sont extraits via regex depuis le contenu de fichiers statiques du projet lors de l'initialisation. Un utilisateur peut seulement sélectionner parmi les clés existantes via l'API /snippets/:challenge, mais ne peut pas injecter de contenu arbitraire dans la construction de l'expression régulière."
        }
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "997e77ef-1883-45e0-9990-89acde69e192",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 17,
                                "content": "      challengeUtils.solveIf(challenges.redirectCryptoCurrencyChallenge, () => { return toUrl === 'https://explorer.dash.org/address/Xr556RzuwX6hg5EGpkybbv5RanJoZN17kW' || toUrl === 'https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm' || toUrl === 'https://etherscan.io/address/0x0f933ab9fcaaa782d0279c300d73750e1311eae6' })"
                            },
                            {
                                "line": 18,
                                "content": "      challengeUtils.solveIf(challenges.redirectChallenge, () => { return isUnintendedRedirect(toUrl) })"
                            },
                            {
                                "line": 19,
                                "content": "      res.redirect(toUrl)"
                            },
                            {
                                "line": 20,
                                "content": "    } else {"
                            },
                            {
                                "line": 21,
                                "content": "      res.status(406)"
                            }
                        ],
                        "id": "103b20eb-598a-49d9-979f-0a420bbff42f",
                        "vulnerableStartLine": 19,
                        "vulnerableEndLine": 19,
                        "startLine": 17,
                        "endLine": 21,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "997e77ef-1883-45e0-9990-89acde69e192",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-07-31T11:27:12.000Z",
                "updateAt": "2025-07-31T11:27:12.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "LOW",
                "currentPriority": "low",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/redirect.ts",
                "vulnerableStartLine": 19,
                "vulnerableEndLine": 19,
                "vulnerability": {
                    "cwe": [
                        "CWE-601"
                    ],
                    "owaspTop10": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "cweArray": [
                        "CWE-601"
                    ],
                    "references": [
                        {
                            "id": "e708b458-42a2-454c-a91d-e1ec845df583",
                            "name": "OWASP Unvalidated Redirects and Forwards Cheat Sheet",
                            "url": "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "express-open-redirect.js",
                            "content": "module.exports.redirect = function (req, res) {\n\n\t// ok: express-open-redirect\n\tres.redirect(`https://reddit.com/${req.query.url}/fooo`)\n\t// ok: express-open-redirect\n\tres.redirect(\"https://google.com/\"+req.query.url)\n\t// ok: express-open-redirect\n\tres.redirect(config_value.foo+req.query.url)\n\t// ok: express-open-redirect\n\tres.redirect(config_value.foo+req.body.shouldalsonotcatch)\n\t// ok: express-open-redirect\n\tres.redirect(config_value.foo+req)\n\n\t// ruleid: express-open-redirect\n\tres.redirect(req.body.url)\n\t// ruleid: express-open-redirect\n\tres.redirect(`${req.query.url}/fooo`)\n\t// ruleid: express-open-redirect\n\tres.redirect(req.query.url+config_value.url)\n\n\tconst a = req.body.url\n\tconst b = req.body['url']\n\t// ruleid: express-open-redirect\n\tres.redirect(a)\n\t// ruleid: express-open-redirect\n\tres.redirect(`${b}/fooo`)\n\t// ruleid: express-open-redirect\n\tres.redirect(a+config_value.url)\n\n\t// ok: express-open-redirect\n\tres.redirect(c+a)\n\t// ok: express-open-redirect\n\tres.redirect(`${c}${a}/fooo`)\n\t// ok: express-open-redirect\n\tres.redirect(c+a+config_value.url)\n\n\t// ok: express-open-redirect\n\tres.redirect(c)\n\t// ok: express-open-redirect\n\tres.redirect(`${c}`)\n\t// ok: express-open-redirect\n\tres.redirect(c+config_value.url)\n\n\t// ruleid: express-open-redirect\n\tres.redirect(req.body['url'])\n\t// ruleid: express-open-redirect\n\tres.redirect(`${req.body['url']}/fooo`)\n\t// ruleid: express-open-redirect\n\tres.redirect(req.body['url']+config_value.url)\n\n\t// ruleid: express-open-redirect\n\tres.redirect(\"https://\"+req.body['url'])\n\t// ruleid: express-open-redirect\n\tres.redirect(`https://${req.body['url']}/fooo`)\n\t// ruleid: express-open-redirect\n\tres.redirect(\"https://\"+req.body['url']+config_value.url)\n\n\t// todo: express-open-redirect\n\tres.redirect(\"https://google.com\"+req.query.url)\n}\n"
                        }
                    ],
                    "id": "8237873b-8545-4fc7-a458-cc1fd1c2dd70",
                    "name": "Unvalidated URL Redirect in Express.js",
                    "shortDescription": "Express.js uses res.redirect() with user-controlled input without validation, allowing attackers to redirect users to arbitrary external URLs.",
                    "description": "Insecure handling of redirect targets in Express.js can lead to an **open redirect** vulnerability. The **res.redirect()** function is invoked with user-controlled input without proper validation or sanitization. For example:\r\n\r\n- `res.redirect(req.body.url)`\r\n- `res.redirect(`${req.query.url}/path`)\r\n\r\nThese patterns permit arbitrary URIs or domains to be specified as the redirect target. An attacker can craft a URL that causes the application to forward users to malicious external sites. While this flaw does not directly expose sensitive data or alter server-side state, it can facilitate phishing campaigns, malware distribution, or bypass of security filters. The root cause is the lack of an allow-list or validation logic to ensure that the redirect destination is restricted to approved domains or paths.",
                    "howToPrevent": "To prevent unvalidated redirects in Express.js:\r\n\r\n1. **Use an allow-list** of permitted redirect targets. Define a set of safe domains or internal paths.\r\n2. **Validate and parse user input** using the Node.js `URL` class. Ensure the hostname, protocol, and path conform to your allow-list.\r\n3. Restrict redirects to **relative paths** within the application when full URLs are not required.\r\n4. **Fallback behavior**: If validation fails, redirect to a default safe page or return an error response.\r\n\r\nExample implementation:\r\n\r\n```javascript\r\nconst allowedHosts = new Set(['example.com', 'app.example.com']);\r\napp.get('/redirect', (req, res) => {\r\n  try {\r\n    const target = new URL(req.query.url, 'https://app.example.com');\r\n    if (!allowedHosts.has(target.hostname)) {\r\n      return res.redirect('/error');\r\n    }\r\n    res.redirect(target.toString());\r\n  } catch {\r\n    res.redirect('/error');\r\n  }\r\n});\r\n```",
                    "severity": "LOW",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:N",
                        "baseScore": "2.9"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "express"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "HIGH",
                        "impact": "MEDIUM",
                        "likelihood": "HIGH"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "f8e9a7b6-5c4d-3e2f-8a9b-1c2d3e4f5a6b",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 27,
                                "content": "        const sandbox = { safeEval, orderLinesData: executionPayload }"
                            },
                            {
                                "line": 28,
                                "content": "        vm.createContext(sandbox)"
                            },
                            {
                                "line": 29,
                                "content": "        "
                            },
                            {
                                "line": 30,
                                "content": "        // Execute processed data - appears vulnerable but data is sanitized"
                            },
                            {
                                "line": 31,
                                "content": "        vm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })"
                            }
                        ],
                        "id": "b7c8d9e0-f1a2-4b3c-9d8e-2f3a4b5c6d7e",
                        "vulnerableStartLine": 31,
                        "vulnerableEndLine": 31,
                        "startLine": 27,
                        "endLine": 31,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "f8e9a7b6-5c4d-3e2f-8a9b-1c2d3e4f5a6b",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-08-02T14:20:00.000Z",
                "updateAt": "2025-08-02T14:20:00.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "CRITICAL",
                "currentPriority": "critical_urgent",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/routes/secureB2bOrder.ts",
                "vulnerableStartLine": 31,
                "vulnerableEndLine": 31,
                "vulnerability": {
                    "cwe": [
                        "CWE-1104"
                    ],
                    "owaspTop10": [
                        "A06:2021 - Vulnerable and Outdated Components"
                    ],
                    "cweArray": [
                        "CWE-1104"
                    ],
                    "references": [
                        {
                            "id": "1bfe7342-994b-426a-8dea-9dec2db79283",
                            "name": "notevil GitHub repository",
                            "url": "https://github.com/mmckegg/notevil"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "express-detect-notevil-usage.ts",
                            "content": "// Example of notevil usage that appears vulnerable but is actually safe due to input sanitization"
                        }
                    ],
                    "id": "c9d8e7f6-a5b4-4c3d-8e9f-6a5b4c3d2e1f",
                    "name": "Apparent untrusted code execution via notevil package",
                    "shortDescription": "Code appears to use notevil eval functions on untrusted input but input is actually sanitized through a security pipeline.",
                    "description": "This code appears vulnerable as it uses vm.runInContext with safeEval on user input, similar to the original RCE vulnerability. However, the input undergoes extensive validation and sanitization through ContentValidator, ContentProcessor, SecurityMiddleware, and OrderManager before reaching the execution point. The security pipeline ensures only safe JSON data is executed.",
                    "howToPrevent": "Continue using comprehensive input validation and sanitization pipelines before any dynamic code execution.",
                    "severity": "CRITICAL",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                        "baseScore": "9.8"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "audit"
                        ],
                        "technology": [
                            "javascript",
                            "typescript"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "LOW",
                        "impact": "HIGH",
                        "likelihood": "LOW"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast",
        "dataflow": [
            {
                "file": "/server.ts",
                "category": "source",
                "line": 627,
                "explanation": "Route Express POST /b2b/v3/orders reçoit les données utilisateur",
                "variables": [
                    "req.body"
                ]
            },
            {
                "file": "/routes/secureB2bOrder.ts",
                "category": "propagation",
                "line": 17,
                "explanation": "Fonction secureB2bOrder reçoit le body de la requête HTTP",
                "variables": [
                    "body"
                ]
            },
            {
                "file": "/routes/secureB2bOrder.ts",
                "category": "propagation",
                "line": 19,
                "explanation": "Extraction de orderLinesData depuis body.orderLinesData",
                "variables": [
                    "body.orderLinesData",
                    "orderLinesData"
                ]
            },
            {
                "file": "/routes/secureB2bOrder.ts",
                "category": "propagation",
                "line": 22,
                "explanation": "Création de l'OrderManager pour traitement sécurisé",
                "variables": [
                    "orderManager"
                ]
            },
            {
                "file": "/routes/secureB2bOrder.ts",
                "category": "propagation",
                "line": 23,
                "explanation": "Traitement des données via pipeline de sécurité",
                "variables": [
                    "orderLinesData",
                    "secureContext"
                ]
            },
            {
                "file": "/lib/orderManager.ts",
                "category": "propagation",
                "line": 13,
                "explanation": "Préparation du contexte d'exécution via SecurityMiddleware",
                "variables": [
                    "requestData"
                ]
            },
            {
                "file": "/lib/securityMiddleware.ts",
                "category": "propagation",
                "line": 13,
                "explanation": "Validation du contenu sécurisé via ContentProcessor",
                "variables": [
                    "inputData"
                ]
            },
            {
                "file": "/lib/contentProcessor.ts",
                "category": "propagation",
                "line": 13,
                "explanation": "Traitement des lignes de commande via ContentValidator",
                "variables": [
                    "rawData"
                ]
            },
            {
                "file": "/lib/contentValidator.ts",
                "category": "propagation",
                "line": 8,
                "explanation": "Validation et parsing JSON strict - bloque les patterns JS",
                "variables": [
                    "data"
                ]
            },
            {
                "file": "/lib/contentValidator.ts",
                "category": "propagation",
                "line": 13,
                "explanation": "Parsing JSON sécurisé - lève exception si code JS détecté",
                "variables": [
                    "parsed"
                ]
            },
            {
                "file": "/lib/securityMiddleware.ts",
                "category": "propagation",
                "line": 47,
                "explanation": "Restriction du contenu exécutable - supprime patterns function/while/for",
                "variables": [
                    "content"
                ]
            },
            {
                "file": "/lib/orderManager.ts",
                "category": "propagation",
                "line": 36,
                "explanation": "Conversion finale en JSON string sécurisé pour évaluation",
                "variables": [
                    "safeData"
                ]
            },
            {
                "file": "/routes/secureB2bOrder.ts",
                "category": "propagation",
                "line": 24,
                "explanation": "Extraction du payload d'exécution validé et sécurisé",
                "variables": [
                    "executionPayload"
                ]
            },
            {
                "file": "/routes/secureB2bOrder.ts",
                "category": "sink",
                "line": 31,
                "explanation": "Exécution VM avec données sanitisées - apparaît vulnérable mais sécurisé par pipeline",
                "variables": [
                    "executionPayload"
                ]
            }
        ],
        "vulnerability_truth": {
            "verdict": "FP",
            "explanation": "False Positive: Bien que le code utilise vm.runInContext avec safeEval de manière similaire à la vulnérabilité RCE originale, les données passent par un pipeline de sécurité complet sur 5 fichiers avant l'exécution. Le ContentValidator force le parsing JSON strict et bloque tout code JavaScript, le SecurityMiddleware supprime les patterns exécutables (function, while, for), et l'OrderManager convertit finalement les données en JSON string sécurisé. Un scanner SAST détecterait cette vulnérabilité à cause du pattern vm.runInContext, mais c'est un faux positif car l'input est entièrement sanitisé et seul du JSON valide peut être exécuté."
        }
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 18,
                                "content": "    // VULNÉRABILITÉ: Construction dynamique de RegExp avec données utilisateur"
                            },
                            {
                                "line": 19,
                                "content": "    const searchRegex = new RegExp(combinedPattern, 'i')"
                            },
                            {
                                "line": 20,
                                "content": ""
                            },
                            {
                                "line": 21,
                                "content": "    return {"
                            },
                            {
                                "line": 22,
                                "content": "      patterns: [searchRegex],"
                            }
                        ],
                        "id": "b2c3d4e5-f6a7-8901-bcde-f23456789012",
                        "vulnerableStartLine": 19,
                        "vulnerableEndLine": 19,
                        "startLine": 18,
                        "endLine": 22,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-08-02T14:35:00.000Z",
                "updateAt": "2025-08-02T14:35:00.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "MEDIUM",
                "currentPriority": "normal",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/lib/patternExecutor.ts",
                "vulnerableStartLine": 19,
                "vulnerableEndLine": 19,
                "vulnerability": {
                    "cwe": [
                        "CWE-1333"
                    ],
                    "owaspTop10": [
                        "A05:2021 - Security Misconfiguration",
                        "A06:2017 - Security Misconfiguration"
                    ],
                    "cweArray": [
                        "CWE-1333"
                    ],
                    "references": [
                        {
                            "id": "0512582f-2c8c-468d-a865-996f4a514406",
                            "name": "detect-non-literal-regexp rule in ESLint Plugin Security",
                            "url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js"
                        },
                        {
                            "id": "22f05b6f-0c74-49f2-84e7-65b4a8305524",
                            "name": "Regular Expression Denial of Service - OWASP",
                            "url": "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "detect-non-literal-regexp.js",
                            "content": "function ok (name) {\n  //ok: detect-non-literal-regexp\n  const reg = new RegExp(\"\\\\w+\")\n  return reg.exec(name)\n}\n\nfunction bad (name) {\n  //ruleid: detect-non-literal-regexp\n  const reg = new RegExp(\"\\\\w+\" + name)\n  return reg.exec(name)\n}\n\nfunction jsliteral (name) {\n  const exp = /a.*/;\n  //ok: detect-non-literal-regexp\n  const reg = new RegExp(exp);\n  return reg.exec(name);\n}\n"
                        }
                    ],
                    "id": "c3d4e5f6-a7b8-9012-cdef-345678901234",
                    "name": "Dynamic RegExp Creation Leading to ReDoS",
                    "shortDescription": "Dynamic regex creation from untrusted input can lead to Regular Expression Denial-of-Service that blocks the main thread.",
                    "description": "**Dynamic pattern construction** using the **RegExp** constructor with user-controlled data can introduce patterns susceptible to **catastrophic backtracking**. When triggered, the regex engine may consume excessive CPU cycles, blocking the event loop and causing Denial-of-Service. In the provided code, user search queries are directly incorporated into regex patterns without validation, exposing the pattern to arbitrary input that can force exponential backtracking and stall the main thread.",
                    "howToPrevent": "**Recommendations:**\r\n- Use **literal** regex definitions: `const reg = /\\w+/;`\r\n- Validate or sanitize user input before incorporating it into patterns\r\n- Limit quantifiers and avoid nested or ambiguous pattern constructs\r\n- Apply timeouts or use safe regex libraries like `recheck` to detect and reject vulnerable patterns\r\n- When dynamic patterns are required, enforce strict pattern whitelisting and input length checks",
                    "severity": "MEDIUM",
                    "language": "JavaScript",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                        "baseScore": "4.5"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "javascript"
                        ],
                        "languages": [
                            "JavaScript",
                            "TypeScript"
                        ],
                        "category": "security",
                        "confidence": "HIGH",
                        "impact": "MEDIUM",
                        "likelihood": "HIGH"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast",
        "dataflow": [
            {
                "file": "/server.ts",
                "category": "source",
                "line": 675,
                "explanation": "Route HTTP GET /api/products/search reçoit le paramètre query depuis les query parameters",
                "variables": [
                    "req.query.query"
                ]
            },
            {
                "file": "/routes/productSearchEngine.ts",
                "category": "propagation",
                "line": 12,
                "explanation": "Extraction du paramètre searchQuery depuis la requête utilisateur",
                "variables": [
                    "searchQuery"
                ]
            },
            {
                "file": "/routes/productSearchEngine.ts",
                "category": "propagation",
                "line": 21,
                "explanation": "Passage de searchQuery à SearchPatternBuilder.performAdvancedSearch",
                "variables": [
                    "searchQuery"
                ]
            },
            {
                "file": "/lib/searchPatternBuilder.ts",
                "category": "propagation",
                "line": 11,
                "explanation": "Traitement de searchQuery via QueryNormalizer.processSearchQuery",
                "variables": [
                    "searchQuery"
                ]
            },
            {
                "file": "/lib/queryNormalizer.ts",
                "category": "propagation",
                "line": 11,
                "explanation": "Normalisation basique de l'input utilisateur puis passage au cache manager",
                "variables": [
                    "normalizedInput"
                ]
            },
            {
                "file": "/lib/searchCacheManager.ts",
                "category": "propagation",
                "line": 25,
                "explanation": "Transmission des métadonnées de recherche vers PatternExecutor",
                "variables": [
                    "metadata"
                ]
            },
            {
                "file": "/lib/patternExecutor.ts",
                "category": "sink",
                "line": 19,
                "explanation": "Construction de RegExp dynamique avec données utilisateur non validées - exploitable pour ReDoS",
                "variables": [
                    "combinedPattern"
                ]
            }
        ],
        "vulnerability_truth": {
            "verdict": "TP",
            "explanation": "Vrai Positif: Cette vulnérabilité est exploitable car les données utilisateur du paramètre query transitent à travers 5 fichiers sans validation de sécurité adéquate pour les expressions régulières. Bien que la fonction normalizeUserInput() supprime certains caractères spéciaux, elle n'empêche pas la création de patterns RegExp vulnérables au ReDoS. Un attaquant peut facilement contourner cette normalisation basique et injecter des patterns comme '(a+)+b' qui causent une catastrophic backtracking. La route /api/products/search est accessible publiquement, rendant cette vulnérabilité directement exploitable."
        }
    }
]