        "vulnerability": "sast",
        "dataflow": [
            {
                "file": "/server.ts",
                "category": "source",
                "line": 621,
                "explanation": "Route GET /rest/chatbot/status - point d'entrée authentifié",
                "variables": ["req.cookies.token"]
            },
            {
                "file": "/routes/chatbot.ts",
                "category": "propagation",
                "line": 166,
                "explanation": "Extraction du token JWT depuis les cookies ou headers",
                "variables": ["token"]
            },
            {
                "file": "/routes/chatbot.ts",
                "category": "propagation",
                "line": 174,
                "explanation": "Vérification cryptographique du JWT avec clé publique",
                "variables": ["user"]
            },
            {
                "file": "/lib/insecurity.ts",
                "category": "propagation",
                "line": 237,
                "explanation": "Décodage JWT avec jwt.verify() - extraction de decoded.data",
                "variables": ["decoded.data"]
            },
            {
                "file": "/routes/chatbot.ts",
                "category": "propagation",
                "line": 195,
                "explanation": "Utilisation de user.id (entier auto-incrémenté DB) dans bot.addUser",
                "variables": ["user.id"]
            },
            {
                "file": "/routes/chatbot.ts",
                "category": "sink",
                "line": 197,
                "explanation": "Interpolation de user.id dans template literal pour réponse JSON",
                "variables": ["user.id"]
            }
        ],
        "vulnerability_truth": {
            "verdict": "FP",
            "explanation": "False Positive: Bien que le scanner détecte une interpolation de template literal, user.id provient d'un JWT vérifié cryptographiquement et est un entier auto-incrémenté de base de données non contrôlable par l'utilisateur. La réponse est JSON (pas HTML) et le frontend Angular échappe automatiquement le contenu. Aucun vecteur XSS exploitable."
        }
    },
    {
        "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
        "vulnerabilityId": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 22,
                                "content": "      return `<div class=\"analytics-report\">"
                            },
                            {
                                "line": 23,
                                "content": "        <h1>${customHeading}</h1>"
                            },
                            {
                                "line": 24,
                                "content": "        <div class=\"metadata\">"
                            },
                            {
                                "line": 25,
                                "content": "          <p>Generated: ${timestamp}</p>"
                            },
                            {
                                "line": 26,
                                "content": "          <p>Report ID: ${reportData.reportId}</p>"
                            }
                        ],
                        "id": "f7e8d9c0-b1a2-3c4d-5e6f-708192a3b4c5",
                        "vulnerableStartLine": 23,
                        "vulnerableEndLine": 23,
                        "startLine": 22,
                        "endLine": 26,
                        "language": "TypeScript",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                "projectId": "dc14b5b8-cc36-4a8d-9eee-7c857f3c71dd",
                "createdAt": "2025-08-02T15:30:00.000Z",
                "updateAt": "2025-08-02T15:30:00.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "HIGH",
                "currentPriority": "urgent",
                "contextualExplanation": "",
                "language": "TypeScript",
                "path": "juice-shop-master/lib/templateBuilder.ts",
                "vulnerableStartLine": 23,
                "vulnerableEndLine": 23,
                "vulnerability": {
                    "cwe": [
                        "CWE-79"
                    ],
                    "owaspTop10": [
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-79"
                    ],
                    "references": [],
                    "codeExamples": [
                    ],
                    "id": "3502f12c-31bf-4496-ab4f-8b3d286935b0",
                    "name": "Reflected XSS in Manually Constructed HTML",
                    "shortDescription": "Unescaped user input is inserted into manually constructed HTML in Flask routes, enabling reflected cross-site scripting.",
                    "description": "**Manual HTML Construction**: The application concatenates or formats **unescaped user input** into HTML strings (for example, `\"<a href='%s'>...\" % route_param` or `\"<a href='{}'>...\".format(param)`).\r\n\r\n**Vulnerability Mechanism**: Absence of **output encoding** or **template auto-escaping** allows an attacker to inject `<script>` tags, event handlers, or other HTML elements, resulting in execution of arbitrary JavaScript in the user's browser context.\r\n\r\n**Impact**: An attacker can exploit this flaw to perform **session hijacking**, **credential theft**, or **unauthorized actions** under the user's identity by crafting a malicious URL that delivers and executes payloads when clicked.",
                    "howToPrevent": "- Use Jinja2 templates via `flask.render_template()`, which **auto-escapes** all variables by default.\r\n- Apply explicit **output encoding** on dynamic values using `markupsafe.escape()` before injecting them into HTML.\r\n- Validate and sanitize inputs with a **strict whitelist** of allowed characters or URL schemes (for example, using `urllib.parse` to parse and verify URLs).\r\n- Avoid manual string concatenation or formatting of HTML; rely on template engines or dedicated sanitization libraries for any user-supplied content.",
                    "severity": "HIGH",
                    "language": "Python",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "baseScore": "7.6"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "likelihood": "MEDIUM"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast",
        "dataflow": [
            {
                "file": "/server.ts",
                "category": "source",
                "line": 624,
                "explanation": "Route POST /api/chatbot/analytics - point d'entrée authentifié",
                "variables": ["req.body.title"]
            },
            {
                "file": "/routes/chatbotAnalytics.ts",
                "category": "propagation",
                "line": 31,
                "explanation": "Extraction du paramètre title depuis le body de la requête",
                "variables": ["req.body.title", "customHeading"]
            },
            {
                "file": "/routes/chatbotAnalytics.ts",
                "category": "propagation",
                "line": 36,
                "explanation": "Traitement des données d'activité via AnalyticsProcessor",
                "variables": ["customHeading"]
            },
            {
                "file": "/lib/analyticsProcessor.ts",
                "category": "propagation",
                "line": 21,
                "explanation": "Génération du rapport avec données utilisateur via generateReport",
                "variables": ["processedData"]
            },
            {
                "file": "/routes/chatbotAnalytics.ts",
                "category": "propagation",
                "line": 39,
                "explanation": "Passage du customHeading non sanitisé au TemplateBuilder",
                "variables": ["customHeading", "report"]
            },
            {
                "file": "/lib/templateBuilder.ts",
                "category": "sink",
                "line": 23,
                "explanation": "Injection directe de customHeading dans template HTML sans échappement",
                "variables": ["customHeading"]
            }
        ],
        "vulnerability_truth": {
            "verdict": "TP",
            "explanation": "True Positive: L'application accepte un paramètre 'title' contrôlé par l'utilisateur via req.body.title qui traverse 5 fichiers différents avant d'être injecté directement dans un template HTML sans aucune sanitisation. La variable customHeading est interpolée dans <h1>${customHeading}</h1> permettant l'injection de code JavaScript arbitraire. Un attaqueur peut envoyer {'title': '<script>alert(\"XSS\")</script>'} pour exécuter du code JavaScript dans le navigateur de la victime."
        }
